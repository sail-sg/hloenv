HloModule jit__normal.39

xla_fallback_threefry2x32.21 {
  Arg_0.22 = u32[] parameter(0)
  broadcast.26 = u32[64]{0} broadcast(Arg_0.22), dimensions={}
  Arg_1.23 = u32[] parameter(1)
  broadcast.27 = u32[64]{0} broadcast(Arg_1.23), dimensions={}
  Arg_2.24 = u32[64]{0} parameter(2)
  Arg_3.25 = u32[64]{0} parameter(3)
  ROOT custom-call.28 = (u32[64]{0}, u32[64]{0}) custom-call(broadcast.26, broadcast.27, Arg_2.24, Arg_3.25), custom_call_target="cuda_threefry2x32", operand_layout_constraints={u32[64]{0}, u32[64]{0}, u32[64]{0}, u32[64]{0}}, api_version=API_VERSION_STATUS_RETURNING, backend_config="@\000\000\000\000\000\000\000"
}

threefry2x32.29 {
  Arg_0.30 = u32[] parameter(0)
  Arg_1.31 = u32[] parameter(1)
  Arg_2.32 = u32[64]{0} parameter(2)
  Arg_3.33 = u32[64]{0} parameter(3)
  call.34 = (u32[64]{0}, u32[64]{0}) call(Arg_0.30, Arg_1.31, Arg_2.32, Arg_3.33), to_apply=xla_fallback_threefry2x32.21
  get-tuple-element.35 = u32[64]{0} get-tuple-element(call.34), index=0
  get-tuple-element.36 = u32[64]{0} get-tuple-element(call.34), index=1
  ROOT tuple.37 = (u32[64]{0}, u32[64]{0}) tuple(get-tuple-element.35, get-tuple-element.36)
}

xla_fallback_erf_inv.50 {
  Arg_0.51 = f32[128,1]{1,0} parameter(0)
  abs.98 = f32[128,1]{1,0} abs(Arg_0.51)
  constant.96 = f32[] constant(1)
  broadcast.97 = f32[128,1]{1,0} broadcast(constant.96), dimensions={}
  compare.99 = pred[128,1]{1,0} compare(abs.98, broadcast.97), direction=EQ
  constant.94 = f32[] constant(inf)
  broadcast.95 = f32[128,1]{1,0} broadcast(constant.94), dimensions={}
  multiply.100 = f32[128,1]{1,0} multiply(Arg_0.51, broadcast.95)
  negate.101 = f32[128,1]{1,0} negate(Arg_0.51)
  multiply.102 = f32[128,1]{1,0} multiply(negate.101, Arg_0.51)
  log-plus-one.103 = f32[128,1]{1,0} log-plus-one(multiply.102)
  negate.104 = f32[128,1]{1,0} negate(log-plus-one.103)
  constant.92 = f32[] constant(5)
  broadcast.93 = f32[128,1]{1,0} broadcast(constant.92), dimensions={}
  compare.105 = pred[128,1]{1,0} compare(negate.104, broadcast.93), direction=LT
  constant.90 = f32[] constant(1.50140941)
  broadcast.91 = f32[128,1]{1,0} broadcast(constant.90), dimensions={}
  constant.88 = f32[] constant(2.83297682)
  broadcast.89 = f32[128,1]{1,0} broadcast(constant.88), dimensions={}
  select.106 = f32[128,1]{1,0} select(compare.105, broadcast.91, broadcast.89)
  constant.86 = f32[] constant(0.246640727)
  broadcast.87 = f32[128,1]{1,0} broadcast(constant.86), dimensions={}
  constant.84 = f32[] constant(1.00167406)
  broadcast.85 = f32[128,1]{1,0} broadcast(constant.84), dimensions={}
  select.107 = f32[128,1]{1,0} select(compare.105, broadcast.87, broadcast.85)
  constant.82 = f32[] constant(-0.00417768164)
  broadcast.83 = f32[128,1]{1,0} broadcast(constant.82), dimensions={}
  constant.80 = f32[] constant(0.00943887047)
  broadcast.81 = f32[128,1]{1,0} broadcast(constant.80), dimensions={}
  select.108 = f32[128,1]{1,0} select(compare.105, broadcast.83, broadcast.81)
  constant.78 = f32[] constant(-0.00125372503)
  broadcast.79 = f32[128,1]{1,0} broadcast(constant.78), dimensions={}
  constant.76 = f32[] constant(-0.0076224613)
  broadcast.77 = f32[128,1]{1,0} broadcast(constant.76), dimensions={}
  select.109 = f32[128,1]{1,0} select(compare.105, broadcast.79, broadcast.77)
  constant.74 = f32[] constant(0.00021858087)
  broadcast.75 = f32[128,1]{1,0} broadcast(constant.74), dimensions={}
  constant.72 = f32[] constant(0.00573950773)
  broadcast.73 = f32[128,1]{1,0} broadcast(constant.72), dimensions={}
  select.110 = f32[128,1]{1,0} select(compare.105, broadcast.75, broadcast.73)
  constant.70 = f32[] constant(-4.39150654e-06)
  broadcast.71 = f32[128,1]{1,0} broadcast(constant.70), dimensions={}
  constant.68 = f32[] constant(-0.00367342844)
  broadcast.69 = f32[128,1]{1,0} broadcast(constant.68), dimensions={}
  select.111 = f32[128,1]{1,0} select(compare.105, broadcast.71, broadcast.69)
  constant.66 = f32[] constant(-3.5233877e-06)
  broadcast.67 = f32[128,1]{1,0} broadcast(constant.66), dimensions={}
  constant.64 = f32[] constant(0.00134934322)
  broadcast.65 = f32[128,1]{1,0} broadcast(constant.64), dimensions={}
  select.112 = f32[128,1]{1,0} select(compare.105, broadcast.67, broadcast.65)
  constant.62 = f32[] constant(3.43273939e-07)
  broadcast.63 = f32[128,1]{1,0} broadcast(constant.62), dimensions={}
  constant.60 = f32[] constant(0.000100950558)
  broadcast.61 = f32[128,1]{1,0} broadcast(constant.60), dimensions={}
  select.113 = f32[128,1]{1,0} select(compare.105, broadcast.63, broadcast.61)
  constant.58 = f32[] constant(2.81022636e-08)
  broadcast.59 = f32[128,1]{1,0} broadcast(constant.58), dimensions={}
  constant.56 = f32[] constant(-0.000200214257)
  broadcast.57 = f32[128,1]{1,0} broadcast(constant.56), dimensions={}
  select.114 = f32[128,1]{1,0} select(compare.105, broadcast.59, broadcast.57)
  constant.54 = f32[] constant(2.5)
  broadcast.55 = f32[128,1]{1,0} broadcast(constant.54), dimensions={}
  subtract.115 = f32[128,1]{1,0} subtract(negate.104, broadcast.55)
  sqrt.116 = f32[128,1]{1,0} sqrt(negate.104)
  constant.52 = f32[] constant(3)
  broadcast.53 = f32[128,1]{1,0} broadcast(constant.52), dimensions={}
  subtract.117 = f32[128,1]{1,0} subtract(sqrt.116, broadcast.53)
  select.118 = f32[128,1]{1,0} select(compare.105, subtract.115, subtract.117)
  multiply.119 = f32[128,1]{1,0} multiply(select.114, select.118)
  add.120 = f32[128,1]{1,0} add(select.113, multiply.119)
  multiply.121 = f32[128,1]{1,0} multiply(add.120, select.118)
  add.122 = f32[128,1]{1,0} add(select.112, multiply.121)
  multiply.123 = f32[128,1]{1,0} multiply(add.122, select.118)
  add.124 = f32[128,1]{1,0} add(select.111, multiply.123)
  multiply.125 = f32[128,1]{1,0} multiply(add.124, select.118)
  add.126 = f32[128,1]{1,0} add(select.110, multiply.125)
  multiply.127 = f32[128,1]{1,0} multiply(add.126, select.118)
  add.128 = f32[128,1]{1,0} add(select.109, multiply.127)
  multiply.129 = f32[128,1]{1,0} multiply(add.128, select.118)
  add.130 = f32[128,1]{1,0} add(select.108, multiply.129)
  multiply.131 = f32[128,1]{1,0} multiply(add.130, select.118)
  add.132 = f32[128,1]{1,0} add(select.107, multiply.131)
  multiply.133 = f32[128,1]{1,0} multiply(add.132, select.118)
  add.134 = f32[128,1]{1,0} add(select.106, multiply.133)
  multiply.135 = f32[128,1]{1,0} multiply(add.134, Arg_0.51)
  ROOT select.136 = f32[128,1]{1,0} select(compare.99, multiply.100, multiply.135)
}

erf_inv.137 {
  Arg_0.138 = f32[128,1]{1,0} parameter(0)
  ROOT call.139 = f32[128,1]{1,0} call(Arg_0.138), to_apply=xla_fallback_erf_inv.50
}

ENTRY main.142 {
  Arg_0.1 = u32[2]{0} parameter(0)
  slice.15 = u32[1]{0} slice(Arg_0.1), slice={[0:1]}
  reshape.16 = u32[] reshape(slice.15)
  slice.17 = u32[1]{0} slice(Arg_0.1), slice={[1:2]}
  reshape.18 = u32[] reshape(slice.17)
  iota.14 = u32[128]{0} iota(), iota_dimension=0
  slice.19 = u32[64]{0} slice(iota.14), slice={[0:64]}
  slice.20 = u32[64]{0} slice(iota.14), slice={[64:128]}
  call.38 = (u32[64]{0}, u32[64]{0}) call(reshape.16, reshape.18, slice.19, slice.20), to_apply=threefry2x32.29
  get-tuple-element.39 = u32[64]{0} get-tuple-element(call.38), index=0
  get-tuple-element.40 = u32[64]{0} get-tuple-element(call.38), index=1
  concatenate.41 = u32[128]{0} concatenate(get-tuple-element.39, get-tuple-element.40), dimensions={0}
  reshape.42 = u32[128,1]{1,0} reshape(concatenate.41)
  constant.12 = u32[] constant(9)
  broadcast.13 = u32[128,1]{1,0} broadcast(constant.12), dimensions={}
  shift-right-logical.43 = u32[128,1]{1,0} shift-right-logical(reshape.42, broadcast.13)
  constant.10 = u32[] constant(1065353216)
  broadcast.11 = u32[128,1]{1,0} broadcast(constant.10), dimensions={}
  or.44 = u32[128,1]{1,0} or(shift-right-logical.43, broadcast.11)
  bitcast-convert.45 = f32[128,1]{1,0} bitcast-convert(or.44)
  constant.8 = f32[] constant(1)
  broadcast.9 = f32[128,1]{1,0} broadcast(constant.8), dimensions={}
  subtract.46 = f32[128,1]{1,0} subtract(bitcast-convert.45, broadcast.9)
  constant.6 = f32[] constant(2)
  broadcast.7 = f32[128,1]{1,0} broadcast(constant.6), dimensions={}
  multiply.47 = f32[128,1]{1,0} multiply(subtract.46, broadcast.7)
  constant.4 = f32[] constant(-0.99999994)
  broadcast.5 = f32[128,1]{1,0} broadcast(constant.4), dimensions={}
  add.48 = f32[128,1]{1,0} add(multiply.47, broadcast.5)
  maximum.49 = f32[128,1]{1,0} maximum(add.48, broadcast.5)
  call.140 = f32[128,1]{1,0} call(maximum.49), to_apply=erf_inv.137
  constant.2 = f32[] constant(1.41421354)
  broadcast.3 = f32[128,1]{1,0} broadcast(constant.2), dimensions={}
  ROOT multiply.141 = f32[128,1]{1,0} multiply(call.140, broadcast.3)
}

