HloModule jit_apply_fn.765

region_0.46 {
  Arg_0.47 = f32[] parameter(0)
  Arg_1.48 = f32[] parameter(1)
  ROOT multiply.49 = f32[] multiply(Arg_0.47, Arg_1.48)
}

jit_remainder.53 {
  Arg_0.54 = s32[] parameter(0)
  Arg_1.55 = s32[] parameter(1)
  remainder.57 = s32[] remainder(Arg_0.54, Arg_1.55)
  constant.56 = s32[] constant(0)
  compare.59 = pred[] compare(remainder.57, constant.56), direction=LT
  compare.60 = pred[] compare(Arg_1.55, constant.56), direction=LT
  compare.61 = pred[] compare(compare.59, compare.60), direction=NE
  compare.58 = pred[] compare(remainder.57, constant.56), direction=NE
  and.62 = pred[] and(compare.61, compare.58)
  add.63 = s32[] add(remainder.57, Arg_1.55)
  ROOT select.64 = s32[] select(and.62, add.63, remainder.57)
}

region_2.65 {
  Arg_0.66 = f32[] parameter(0)
  Arg_1.67 = f32[] parameter(1)
  ROOT add.68 = f32[] add(Arg_0.66, Arg_1.67)
}

region_3.69 {
  arg_tuple.70 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) parameter(0)
  get-tuple-element.71 = s32[] get-tuple-element(arg_tuple.70), index=0
  constant.81 = s32[] constant(1)
  add.166 = s32[] add(get-tuple-element.71, constant.81)
  get-tuple-element.76 = f32[] get-tuple-element(arg_tuple.70), index=5
  negate.146 = f32[] negate(get-tuple-element.76)
  negate.111 = f32[] negate(get-tuple-element.76)
  get-tuple-element.72 = f32[] get-tuple-element(arg_tuple.70), index=1
  multiply.112 = f32[] multiply(negate.111, get-tuple-element.72)
  exponential.113 = f32[] exponential(multiply.112)
  get-tuple-element.74 = f32[5]{0} get-tuple-element(arg_tuple.70), index=3
  constant.80 = s32[1,2]{1,0} constant({ { 3, 2 } })
  constant.82 = s32[] constant(0)
  compare.83 = pred[] compare(get-tuple-element.71, constant.82), direction=LT
  add.84 = s32[] add(get-tuple-element.71, constant.81)
  select.85 = s32[] select(compare.83, add.84, get-tuple-element.71)
  dynamic-slice.86 = s32[1,2]{1,0} dynamic-slice(constant.80, select.85, constant.82), dynamic_slice_sizes={1,2}
  reshape.87 = s32[2]{0} reshape(dynamic-slice.86)
  slice.88 = s32[1]{0} slice(reshape.87), slice={[0:1]}
  reshape.89 = s32[] reshape(slice.88)
  compare.114 = pred[] compare(reshape.89, constant.82), direction=LT
  constant.79 = s32[] constant(5)
  add.115 = s32[] add(reshape.89, constant.79)
  select.116 = s32[] select(compare.114, add.115, reshape.89)
  reshape.117 = s32[1]{0} reshape(select.116)
  gather.118 = f32[] gather(get-tuple-element.74, reshape.117), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.119 = f32[] multiply(exponential.113, gather.118)
  get-tuple-element.77 = f32[] get-tuple-element(arg_tuple.70), index=6
  subtract.90 = s32[] subtract(reshape.89, constant.81)
  compare.91 = pred[] compare(subtract.90, constant.82), direction=LT
  add.92 = s32[] add(subtract.90, constant.79)
  select.93 = s32[] select(compare.91, add.92, subtract.90)
  reshape.94 = s32[1]{0} reshape(select.93)
  gather.95 = f32[] gather(get-tuple-element.74, reshape.94), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.96 = f32[] multiply(gather.95, gather.95)
  get-tuple-element.75 = f32[5]{0} get-tuple-element(arg_tuple.70), index=4
  subtract.97 = s32[] subtract(reshape.89, constant.81)
  compare.98 = pred[] compare(subtract.97, constant.82), direction=LT
  add.99 = s32[] add(subtract.97, constant.79)
  select.100 = s32[] select(compare.98, add.99, subtract.97)
  reshape.101 = s32[1]{0} reshape(select.100)
  gather.102 = f32[] gather(get-tuple-element.75, reshape.101), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.103 = f32[] multiply(multiply.96, gather.102)
  constant.78 = f32[] constant(0.873661876)
  subtract.104 = f32[] subtract(multiply.103, constant.78)
  compare.105 = pred[] compare(reshape.89, constant.82), direction=LT
  add.106 = s32[] add(reshape.89, constant.79)
  select.107 = s32[] select(compare.105, add.106, reshape.89)
  reshape.108 = s32[1]{0} reshape(select.107)
  gather.109 = f32[] gather(get-tuple-element.75, reshape.108), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.110 = f32[] divide(subtract.104, gather.109)
  multiply.120 = f32[] multiply(get-tuple-element.77, divide.110)
  add.121 = f32[] add(multiply.119, multiply.120)
  multiply.122 = f32[] multiply(exponential.113, add.121)
  multiply.147 = f32[] multiply(negate.146, multiply.122)
  exponential.148 = f32[] exponential(multiply.147)
  slice.123 = s32[1]{0} slice(reshape.87), slice={[1:2]}
  reshape.124 = s32[] reshape(slice.123)
  compare.149 = pred[] compare(reshape.124, constant.82), direction=LT
  add.150 = s32[] add(reshape.124, constant.79)
  select.151 = s32[] select(compare.149, add.150, reshape.124)
  reshape.152 = s32[1]{0} reshape(select.151)
  gather.153 = f32[] gather(get-tuple-element.74, reshape.152), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.154 = f32[] multiply(exponential.148, gather.153)
  subtract.125 = s32[] subtract(reshape.124, constant.81)
  compare.126 = pred[] compare(subtract.125, constant.82), direction=LT
  add.127 = s32[] add(subtract.125, constant.79)
  select.128 = s32[] select(compare.126, add.127, subtract.125)
  reshape.129 = s32[1]{0} reshape(select.128)
  gather.130 = f32[] gather(get-tuple-element.74, reshape.129), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.131 = f32[] multiply(gather.130, gather.130)
  subtract.132 = s32[] subtract(reshape.124, constant.81)
  compare.133 = pred[] compare(subtract.132, constant.82), direction=LT
  add.134 = s32[] add(subtract.132, constant.79)
  select.135 = s32[] select(compare.133, add.134, subtract.132)
  reshape.136 = s32[1]{0} reshape(select.135)
  gather.137 = f32[] gather(get-tuple-element.75, reshape.136), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.138 = f32[] multiply(multiply.131, gather.137)
  subtract.139 = f32[] subtract(multiply.138, constant.78)
  compare.140 = pred[] compare(reshape.124, constant.82), direction=LT
  add.141 = s32[] add(reshape.124, constant.79)
  select.142 = s32[] select(compare.140, add.141, reshape.124)
  reshape.143 = s32[1]{0} reshape(select.142)
  gather.144 = f32[] gather(get-tuple-element.75, reshape.143), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.145 = f32[] divide(subtract.139, gather.144)
  multiply.155 = f32[] multiply(get-tuple-element.77, divide.145)
  add.156 = f32[] add(multiply.154, multiply.155)
  multiply.157 = f32[] multiply(exponential.148, add.156)
  get-tuple-element.73 = f32[1,2]{1,0} get-tuple-element(arg_tuple.70), index=2
  reshape.158 = f32[1]{0} reshape(multiply.122)
  reshape.159 = f32[1]{0} reshape(multiply.157)
  concatenate.160 = f32[2]{0} concatenate(reshape.158, reshape.159), dimensions={0}
  reshape.161 = f32[1,2]{1,0} reshape(concatenate.160)
  compare.162 = pred[] compare(get-tuple-element.71, constant.82), direction=LT
  add.163 = s32[] add(get-tuple-element.71, constant.81)
  select.164 = s32[] select(compare.162, add.163, get-tuple-element.71)
  dynamic-update-slice.165 = f32[1,2]{1,0} dynamic-update-slice(get-tuple-element.73, reshape.161, select.164, constant.82)
  ROOT tuple.167 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) tuple(add.166, multiply.157, dynamic-update-slice.165, get-tuple-element.74, get-tuple-element.75, get-tuple-element.76, get-tuple-element.77)
}

region_4.168 {
  arg_tuple.169 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) parameter(0)
  get-tuple-element.171 = f32[] get-tuple-element(arg_tuple.169), index=1
  get-tuple-element.172 = f32[1,2]{1,0} get-tuple-element(arg_tuple.169), index=2
  get-tuple-element.173 = f32[5]{0} get-tuple-element(arg_tuple.169), index=3
  get-tuple-element.174 = f32[5]{0} get-tuple-element(arg_tuple.169), index=4
  get-tuple-element.175 = f32[] get-tuple-element(arg_tuple.169), index=5
  get-tuple-element.176 = f32[] get-tuple-element(arg_tuple.169), index=6
  get-tuple-element.170 = s32[] get-tuple-element(arg_tuple.169), index=0
  constant.177 = s32[] constant(1)
  ROOT compare.178 = pred[] compare(get-tuple-element.170, constant.177), direction=LT
}

region_5.179 {
  Arg_0.180 = f32[] parameter(0)
  ROOT Arg_1.181 = f32[] parameter(1)
}

region_6.182 {
  Arg_0.183 = f32[] parameter(0)
  ROOT Arg_1.184 = f32[] parameter(1)
}

region_7.185 {
  arg_tuple.186 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) parameter(0)
  get-tuple-element.187 = s32[] get-tuple-element(arg_tuple.186), index=0
  constant.197 = s32[] constant(1)
  add.283 = s32[] add(get-tuple-element.187, constant.197)
  get-tuple-element.191 = f32[] get-tuple-element(arg_tuple.186), index=4
  negate.242 = f32[] negate(get-tuple-element.191)
  get-tuple-element.192 = f32[5]{0} get-tuple-element(arg_tuple.186), index=5
  get-tuple-element.190 = s32[2,2]{1,0} get-tuple-element(arg_tuple.186), index=3
  constant.199 = s32[] constant(0)
  compare.200 = pred[] compare(get-tuple-element.187, constant.199), direction=LT
  constant.198 = s32[] constant(2)
  add.201 = s32[] add(get-tuple-element.187, constant.198)
  select.202 = s32[] select(compare.200, add.201, get-tuple-element.187)
  dynamic-slice.203 = s32[1,2]{1,0} dynamic-slice(get-tuple-element.190, select.202, constant.199), dynamic_slice_sizes={1,2}
  reshape.204 = s32[2]{0} reshape(dynamic-slice.203)
  slice.240 = s32[1]{0} slice(reshape.204), slice={[1:2]}
  reshape.241 = s32[] reshape(slice.240)
  add.243 = s32[] add(reshape.241, constant.197)
  compare.244 = pred[] compare(add.243, constant.199), direction=LT
  constant.196 = s32[] constant(5)
  add.245 = s32[] add(add.243, constant.196)
  select.246 = s32[] select(compare.244, add.245, add.243)
  reshape.247 = s32[1]{0} reshape(select.246)
  gather.248 = f32[] gather(get-tuple-element.192, reshape.247), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.249 = f32[] multiply(negate.242, gather.248)
  exponential.250 = f32[] exponential(multiply.249)
  compare.251 = pred[] compare(reshape.241, constant.199), direction=LT
  add.252 = s32[] add(reshape.241, constant.196)
  select.253 = s32[] select(compare.251, add.252, reshape.241)
  reshape.254 = s32[1]{0} reshape(select.253)
  gather.255 = f32[] gather(get-tuple-element.192, reshape.254), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.256 = f32[] multiply(exponential.250, gather.255)
  get-tuple-element.193 = f32[] get-tuple-element(arg_tuple.186), index=6
  negate.207 = f32[] negate(get-tuple-element.191)
  slice.205 = s32[1]{0} slice(reshape.204), slice={[0:1]}
  reshape.206 = s32[] reshape(slice.205)
  add.208 = s32[] add(reshape.206, constant.197)
  compare.209 = pred[] compare(add.208, constant.199), direction=LT
  add.210 = s32[] add(add.208, constant.196)
  select.211 = s32[] select(compare.209, add.210, add.208)
  reshape.212 = s32[1]{0} reshape(select.211)
  gather.213 = f32[] gather(get-tuple-element.192, reshape.212), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.214 = f32[] multiply(negate.207, gather.213)
  exponential.215 = f32[] exponential(multiply.214)
  compare.216 = pred[] compare(reshape.206, constant.199), direction=LT
  add.217 = s32[] add(reshape.206, constant.196)
  select.218 = s32[] select(compare.216, add.217, reshape.206)
  reshape.219 = s32[1]{0} reshape(select.218)
  gather.220 = f32[] gather(get-tuple-element.192, reshape.219), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.221 = f32[] multiply(exponential.215, gather.220)
  get-tuple-element.188 = f32[] get-tuple-element(arg_tuple.186), index=1
  multiply.222 = f32[] multiply(get-tuple-element.193, get-tuple-element.188)
  add.223 = f32[] add(multiply.221, multiply.222)
  multiply.224 = f32[] multiply(exponential.215, add.223)
  multiply.225 = f32[] multiply(multiply.224, multiply.224)
  get-tuple-element.194 = f32[5]{0} get-tuple-element(arg_tuple.186), index=7
  compare.226 = pred[] compare(reshape.206, constant.199), direction=LT
  add.227 = s32[] add(reshape.206, constant.196)
  select.228 = s32[] select(compare.226, add.227, reshape.206)
  reshape.229 = s32[1]{0} reshape(select.228)
  gather.230 = f32[] gather(get-tuple-element.194, reshape.229), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.231 = f32[] multiply(multiply.225, gather.230)
  constant.195 = f32[] constant(0.873661876)
  subtract.232 = f32[] subtract(multiply.231, constant.195)
  add.233 = s32[] add(reshape.206, constant.197)
  compare.234 = pred[] compare(add.233, constant.199), direction=LT
  add.235 = s32[] add(add.233, constant.196)
  select.236 = s32[] select(compare.234, add.235, add.233)
  reshape.237 = s32[1]{0} reshape(select.236)
  gather.238 = f32[] gather(get-tuple-element.194, reshape.237), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.239 = f32[] divide(subtract.232, gather.238)
  multiply.257 = f32[] multiply(get-tuple-element.193, divide.239)
  add.258 = f32[] add(multiply.256, multiply.257)
  multiply.259 = f32[] multiply(exponential.250, add.258)
  multiply.260 = f32[] multiply(multiply.259, multiply.259)
  compare.261 = pred[] compare(reshape.241, constant.199), direction=LT
  add.262 = s32[] add(reshape.241, constant.196)
  select.263 = s32[] select(compare.261, add.262, reshape.241)
  reshape.264 = s32[1]{0} reshape(select.263)
  gather.265 = f32[] gather(get-tuple-element.194, reshape.264), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.266 = f32[] multiply(multiply.260, gather.265)
  subtract.267 = f32[] subtract(multiply.266, constant.195)
  add.268 = s32[] add(reshape.241, constant.197)
  compare.269 = pred[] compare(add.268, constant.199), direction=LT
  add.270 = s32[] add(add.268, constant.196)
  select.271 = s32[] select(compare.269, add.270, add.268)
  reshape.272 = s32[1]{0} reshape(select.271)
  gather.273 = f32[] gather(get-tuple-element.194, reshape.272), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.274 = f32[] divide(subtract.267, gather.273)
  get-tuple-element.189 = f32[2,2]{1,0} get-tuple-element(arg_tuple.186), index=2
  reshape.275 = f32[1]{0} reshape(multiply.224)
  reshape.276 = f32[1]{0} reshape(multiply.259)
  concatenate.277 = f32[2]{0} concatenate(reshape.275, reshape.276), dimensions={0}
  reshape.278 = f32[1,2]{1,0} reshape(concatenate.277)
  compare.279 = pred[] compare(get-tuple-element.187, constant.199), direction=LT
  add.280 = s32[] add(get-tuple-element.187, constant.198)
  select.281 = s32[] select(compare.279, add.280, get-tuple-element.187)
  dynamic-update-slice.282 = f32[2,2]{1,0} dynamic-update-slice(get-tuple-element.189, reshape.278, select.281, constant.199)
  ROOT tuple.284 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) tuple(add.283, divide.274, dynamic-update-slice.282, get-tuple-element.190, get-tuple-element.191, get-tuple-element.192, get-tuple-element.193, get-tuple-element.194)
}

region_8.285 {
  arg_tuple.286 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) parameter(0)
  get-tuple-element.288 = f32[] get-tuple-element(arg_tuple.286), index=1
  get-tuple-element.289 = f32[2,2]{1,0} get-tuple-element(arg_tuple.286), index=2
  get-tuple-element.290 = s32[2,2]{1,0} get-tuple-element(arg_tuple.286), index=3
  get-tuple-element.291 = f32[] get-tuple-element(arg_tuple.286), index=4
  get-tuple-element.292 = f32[5]{0} get-tuple-element(arg_tuple.286), index=5
  get-tuple-element.293 = f32[] get-tuple-element(arg_tuple.286), index=6
  get-tuple-element.294 = f32[5]{0} get-tuple-element(arg_tuple.286), index=7
  get-tuple-element.287 = s32[] get-tuple-element(arg_tuple.286), index=0
  constant.295 = s32[] constant(2)
  ROOT compare.296 = pred[] compare(get-tuple-element.287, constant.295), direction=LT
}

region_9.297 {
  Arg_0.298 = f32[] parameter(0)
  ROOT Arg_1.299 = f32[] parameter(1)
}

region_10.300 {
  Arg_0.301 = f32[] parameter(0)
  Arg_1.302 = f32[] parameter(1)
  ROOT add.303 = f32[] add(Arg_0.301, Arg_1.302)
}

region_1.304 {
  constant.333 = s32[] constant(0)
  arg_tuple.305 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) parameter(0)
  get-tuple-element.309 = f32[5]{0} get-tuple-element(arg_tuple.305), index=3
  constant.326 = s32[1]{0} constant({4})
  constant.330 = f32[3]{0} constant({0.828981519, -0.657963097, 0.828981519})
  get-tuple-element.312 = s32[6]{0} get-tuple-element(arg_tuple.305), index=6
  get-tuple-element.306 = s32[] get-tuple-element(arg_tuple.305), index=0
  compare.334 = pred[] compare(get-tuple-element.306, constant.333), direction=LT
  constant.332 = s32[] constant(6)
  add.335 = s32[] add(get-tuple-element.306, constant.332)
  select.336 = s32[] select(compare.334, add.335, get-tuple-element.306)
  dynamic-slice.337 = s32[1]{0} dynamic-slice(get-tuple-element.312, select.336), dynamic_slice_sizes={1}
  reshape.338 = s32[] reshape(dynamic-slice.337)
  constant.331 = s32[] constant(3)
  call.339 = s32[] call(reshape.338, constant.331), to_apply=jit_remainder.53
  compare.340 = pred[] compare(call.339, constant.333), direction=LT
  add.341 = s32[] add(call.339, constant.331)
  select.342 = s32[] select(compare.340, add.341, call.339)
  reshape.343 = s32[1]{0} reshape(select.342)
  gather.344 = f32[] gather(constant.330, reshape.343), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  constant.329 = f32[] constant(0.0005)
  multiply.345 = f32[] multiply(gather.344, constant.329)
  constant.328 = f32[] constant(2)
  divide.346 = f32[] divide(multiply.345, constant.328)
  divide.347 = f32[] divide(divide.346, constant.328)
  slice.349 = f32[1]{0} slice(get-tuple-element.309), slice={[3:4]}
  reshape.350 = f32[] reshape(slice.349)
  power.351 = f32[] power(reshape.350, constant.328)
  get-tuple-element.313 = f32[5]{0} get-tuple-element(arg_tuple.305), index=7
  slice.352 = f32[1]{0} slice(get-tuple-element.313), slice={[3:4]}
  reshape.353 = f32[] reshape(slice.352)
  multiply.354 = f32[] multiply(power.351, reshape.353)
  constant.327 = f32[] constant(0.873661876)
  subtract.355 = f32[] subtract(multiply.354, constant.327)
  slice.356 = f32[1]{0} slice(get-tuple-element.313), slice={[4:5]}
  reshape.357 = f32[] reshape(slice.356)
  divide.358 = f32[] divide(subtract.355, reshape.357)
  multiply.359 = f32[] multiply(divide.347, divide.358)
  scatter.360 = f32[5]{0} scatter(get-tuple-element.309, constant.326, multiply.359), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_2.65
  slice.361 = f32[1]{0} slice(scatter.360), slice={[4:5]}
  reshape.362 = f32[] reshape(slice.361)
  constant.324 = f32[] constant(0)
  broadcast.325 = f32[1,2]{1,0} broadcast(constant.324), dimensions={}
  divide.348 = f32[] divide(divide.347, constant.328)
  tuple.363 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) tuple(constant.333, reshape.362, broadcast.325, scatter.360, get-tuple-element.313, divide.348, divide.347)
  while.364 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) while(tuple.363), condition=region_4.168, body=region_3.69
  get-tuple-element.365 = s32[] get-tuple-element(while.364), index=0
  get-tuple-element.368 = f32[5]{0} get-tuple-element(while.364), index=3
  get-tuple-element.369 = f32[5]{0} get-tuple-element(while.364), index=4
  get-tuple-element.370 = f32[] get-tuple-element(while.364), index=5
  get-tuple-element.371 = f32[] get-tuple-element(while.364), index=6
  get-tuple-element.310 = f32[] get-tuple-element(arg_tuple.305), index=4
  negate.412 = f32[] negate(divide.346)
  constant.323 = s32[3,1]{1,0} constant({ {3}, {2}, {1} })
  get-tuple-element.367 = f32[1,2]{1,0} get-tuple-element(while.364), index=2
  reshape.372 = f32[2]{0} reshape(get-tuple-element.367)
  negate.383 = f32[] negate(divide.348)
  get-tuple-element.366 = f32[] get-tuple-element(while.364), index=1
  multiply.384 = f32[] multiply(negate.383, get-tuple-element.366)
  exponential.385 = f32[] exponential(multiply.384)
  slice.386 = f32[1]{0} slice(scatter.360), slice={[1:2]}
  reshape.387 = f32[] reshape(slice.386)
  multiply.388 = f32[] multiply(exponential.385, reshape.387)
  slice.373 = f32[1]{0} slice(scatter.360), slice={[0:1]}
  reshape.374 = f32[] reshape(slice.373)
  multiply.375 = f32[] multiply(reshape.374, reshape.374)
  slice.376 = f32[1]{0} slice(get-tuple-element.313), slice={[0:1]}
  reshape.377 = f32[] reshape(slice.376)
  multiply.378 = f32[] multiply(multiply.375, reshape.377)
  subtract.379 = f32[] subtract(multiply.378, constant.327)
  slice.380 = f32[1]{0} slice(get-tuple-element.313), slice={[1:2]}
  reshape.381 = f32[] reshape(slice.380)
  divide.382 = f32[] divide(subtract.379, reshape.381)
  multiply.389 = f32[] multiply(divide.347, divide.382)
  add.390 = f32[] add(multiply.388, multiply.389)
  multiply.391 = f32[] multiply(exponential.385, add.390)
  reshape.392 = f32[1]{0} reshape(multiply.391)
  concatenate.393 = f32[3]{0} concatenate(reshape.372, reshape.392), dimensions={0}
  scatter.394 = f32[5]{0} scatter(scatter.360, constant.323, concatenate.393), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=region_5.179
  constant.321 = s32[1]{0} constant({0})
  negate.400 = f32[] negate(divide.348)
  slice.401 = f32[1]{0} slice(scatter.394), slice={[1:2]}
  reshape.402 = f32[] reshape(slice.401)
  multiply.403 = f32[] multiply(negate.400, reshape.402)
  exponential.404 = f32[] exponential(multiply.403)
  slice.405 = f32[1]{0} slice(scatter.394), slice={[0:1]}
  reshape.406 = f32[] reshape(slice.405)
  multiply.407 = f32[] multiply(exponential.404, reshape.406)
  multiply.395 = f32[] multiply(get-tuple-element.310, constant.328)
  constant.322 = f32[] constant(2620.9856)
  subtract.396 = f32[] subtract(multiply.395, constant.322)
  slice.397 = f32[1]{0} slice(get-tuple-element.313), slice={[0:1]}
  reshape.398 = f32[] reshape(slice.397)
  divide.399 = f32[] divide(subtract.396, reshape.398)
  multiply.408 = f32[] multiply(divide.347, divide.399)
  add.409 = f32[] add(multiply.407, multiply.408)
  multiply.410 = f32[] multiply(exponential.404, add.409)
  scatter.411 = f32[5]{0} scatter(scatter.394, constant.321, multiply.410), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_6.182
  slice.413 = f32[1]{0} slice(scatter.411), slice={[0:1]}
  reshape.414 = f32[] reshape(slice.413)
  multiply.415 = f32[] multiply(negate.412, reshape.414)
  exponential.416 = f32[] exponential(multiply.415)
  power.417 = f32[] power(exponential.416, constant.328)
  multiply.418 = f32[] multiply(get-tuple-element.310, power.417)
  multiply.424 = f32[] multiply(multiply.418, constant.328)
  subtract.425 = f32[] subtract(multiply.424, constant.322)
  slice.426 = f32[1]{0} slice(get-tuple-element.313), slice={[0:1]}
  reshape.427 = f32[] reshape(slice.426)
  divide.428 = f32[] divide(subtract.425, reshape.427)
  constant.319 = f32[] constant(0)
  broadcast.320 = f32[2,2]{1,0} broadcast(constant.319), dimensions={}
  iota.429 = s32[4]{0} iota(), iota_dimension=0
  reshape.430 = s32[2,2]{1,0} reshape(iota.429)
  tuple.431 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) tuple(constant.333, divide.428, broadcast.320, reshape.430, divide.348, scatter.411, divide.347, get-tuple-element.313)
  while.432 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) while(tuple.431), condition=region_8.285, body=region_7.185
  get-tuple-element.433 = s32[] get-tuple-element(while.432), index=0
  get-tuple-element.436 = s32[2,2]{1,0} get-tuple-element(while.432), index=3
  get-tuple-element.437 = f32[] get-tuple-element(while.432), index=4
  get-tuple-element.438 = f32[5]{0} get-tuple-element(while.432), index=5
  get-tuple-element.439 = f32[] get-tuple-element(while.432), index=6
  get-tuple-element.440 = f32[5]{0} get-tuple-element(while.432), index=7
  constant.314 = s32[] constant(1)
  add.453 = s32[] add(get-tuple-element.306, constant.314)
  get-tuple-element.307 = f32[1000,3]{1,0} get-tuple-element(arg_tuple.305), index=1
  broadcast.419 = f32[1000,3]{1,0} broadcast(exponential.416), dimensions={}
  multiply.420 = f32[1000,3]{1,0} multiply(get-tuple-element.307, broadcast.419)
  get-tuple-element.308 = f32[5]{0} get-tuple-element(arg_tuple.305), index=2
  broadcast.421 = f32[5]{0} broadcast(divide.346), dimensions={}
  multiply.422 = f32[5]{0} multiply(broadcast.421, scatter.411)
  add.423 = f32[5]{0} add(get-tuple-element.308, multiply.422)
  constant.317 = s32[] constant(0)
  broadcast.318 = s32[4]{0} broadcast(constant.317), dimensions={}
  compare.442 = pred[4]{0} compare(iota.429, broadcast.318), direction=LT
  constant.315 = s32[] constant(5)
  broadcast.316 = s32[4]{0} broadcast(constant.315), dimensions={}
  add.443 = s32[4]{0} add(iota.429, broadcast.316)
  select.444 = s32[4]{0} select(compare.442, add.443, iota.429)
  reshape.445 = s32[4,1]{1,0} reshape(select.444)
  get-tuple-element.435 = f32[2,2]{1,0} get-tuple-element(while.432), index=2
  reshape.441 = f32[4]{0} reshape(get-tuple-element.435)
  scatter.446 = f32[5]{0} scatter(scatter.411, reshape.445, reshape.441), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=region_9.297
  get-tuple-element.434 = f32[] get-tuple-element(while.432), index=1
  multiply.447 = f32[] multiply(divide.347, get-tuple-element.434)
  scatter.448 = f32[5]{0} scatter(scatter.446, constant.326, multiply.447), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_10.300
  get-tuple-element.311 = s32[6]{0} get-tuple-element(arg_tuple.305), index=5
  compare.449 = pred[] compare(get-tuple-element.306, constant.333), direction=LT
  add.450 = s32[] add(get-tuple-element.306, constant.332)
  select.451 = s32[] select(compare.449, add.450, get-tuple-element.306)
  dynamic-update-slice.452 = s32[6]{0} dynamic-update-slice(get-tuple-element.311, constant.321, select.451)
  ROOT tuple.454 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) tuple(add.453, multiply.420, add.423, scatter.448, multiply.418, dynamic-update-slice.452, get-tuple-element.312, get-tuple-element.313)
}

region_11.455 {
  arg_tuple.456 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) parameter(0)
  get-tuple-element.458 = f32[1000,3]{1,0} get-tuple-element(arg_tuple.456), index=1
  get-tuple-element.459 = f32[5]{0} get-tuple-element(arg_tuple.456), index=2
  get-tuple-element.460 = f32[5]{0} get-tuple-element(arg_tuple.456), index=3
  get-tuple-element.461 = f32[] get-tuple-element(arg_tuple.456), index=4
  get-tuple-element.462 = s32[6]{0} get-tuple-element(arg_tuple.456), index=5
  get-tuple-element.463 = s32[6]{0} get-tuple-element(arg_tuple.456), index=6
  get-tuple-element.464 = f32[5]{0} get-tuple-element(arg_tuple.456), index=7
  get-tuple-element.457 = s32[] get-tuple-element(arg_tuple.456), index=0
  constant.465 = s32[] constant(6)
  ROOT compare.466 = pred[] compare(get-tuple-element.457, constant.465), direction=LT
}

jit_remainder_0.485 {
  Arg_0.486 = f32[1000,3]{1,0} parameter(0)
  Arg_1.487 = f32[] parameter(1)
  broadcast.491 = f32[1000,3]{1,0} broadcast(Arg_1.487), dimensions={}
  remainder.492 = f32[1000,3]{1,0} remainder(Arg_0.486, broadcast.491)
  constant.489 = f32[] constant(0)
  broadcast.490 = f32[1000,3]{1,0} broadcast(constant.489), dimensions={}
  compare.494 = pred[1000,3]{1,0} compare(remainder.492, broadcast.490), direction=LT
  constant.488 = f32[] constant(0)
  compare.495 = pred[] compare(Arg_1.487, constant.488), direction=LT
  broadcast.496 = pred[1000,3]{1,0} broadcast(compare.495), dimensions={}
  compare.497 = pred[1000,3]{1,0} compare(compare.494, broadcast.496), direction=NE
  compare.493 = pred[1000,3]{1,0} compare(remainder.492, broadcast.490), direction=NE
  and.498 = pred[1000,3]{1,0} and(compare.497, compare.493)
  broadcast.499 = f32[1000,3]{1,0} broadcast(Arg_1.487), dimensions={}
  add.500 = f32[1000,3]{1,0} add(remainder.492, broadcast.499)
  ROOT select.501 = f32[1000,3]{1,0} select(and.498, add.500, remainder.492)
}

jit_jvp_vmap_remainder__.507 {
  Arg_0.508 = f32[2,3]{1,0} parameter(0)
  Arg_1.509 = f32[] parameter(1)
  broadcast.513 = f32[2,3]{1,0} broadcast(Arg_1.509), dimensions={}
  remainder.514 = f32[2,3]{1,0} remainder(Arg_0.508, broadcast.513)
  constant.511 = f32[] constant(0)
  broadcast.512 = f32[2,3]{1,0} broadcast(constant.511), dimensions={}
  compare.516 = pred[2,3]{1,0} compare(remainder.514, broadcast.512), direction=LT
  constant.510 = f32[] constant(0)
  compare.517 = pred[] compare(Arg_1.509, constant.510), direction=LT
  broadcast.518 = pred[2,3]{1,0} broadcast(compare.517), dimensions={}
  compare.519 = pred[2,3]{1,0} compare(compare.516, broadcast.518), direction=NE
  compare.515 = pred[2,3]{1,0} compare(remainder.514, broadcast.512), direction=NE
  and.520 = pred[2,3]{1,0} and(compare.519, compare.515)
  broadcast.521 = f32[2,3]{1,0} broadcast(Arg_1.509), dimensions={}
  add.522 = f32[2,3]{1,0} add(remainder.514, broadcast.521)
  select.523 = f32[2,3]{1,0} select(and.520, add.522, remainder.514)
  ROOT tuple.524 = (f32[2,3]{1,0}, pred[2,3]{1,0}) tuple(select.523, and.520)
}

region_12.531 {
  Arg_0.532 = f32[] parameter(0)
  Arg_1.533 = f32[] parameter(1)
  ROOT add.534 = f32[] add(Arg_0.532, Arg_1.533)
}

jit_jvp_vmap__where__.537 {
  Arg_0.538 = pred[2]{0} parameter(0)
  Arg_1.539 = f32[2]{0} parameter(1)
  Arg_2.540 = s32[] parameter(2)
  convert.543 = f32[] convert(Arg_2.540)
  broadcast.544 = f32[2]{0} broadcast(convert.543), dimensions={}
  select.545 = f32[2]{0} select(Arg_0.538, Arg_1.539, broadcast.544)
  constant.541 = f32[] constant(0)
  broadcast.542 = f32[2]{0} broadcast(constant.541), dimensions={}
  ROOT tuple.546 = (f32[2]{0}, pred[2]{0}, f32[2]{0}) tuple(select.545, Arg_0.538, broadcast.542)
}

jit_jvp_vmap__where___1.547 {
  Arg_0.548 = pred[2]{0} parameter(0)
  Arg_1.549 = f32[2]{0} parameter(1)
  Arg_2.550 = s32[] parameter(2)
  convert.553 = f32[] convert(Arg_2.550)
  broadcast.554 = f32[2]{0} broadcast(convert.553), dimensions={}
  select.555 = f32[2]{0} select(Arg_0.548, Arg_1.549, broadcast.554)
  constant.551 = f32[] constant(0)
  broadcast.552 = f32[2]{0} broadcast(constant.551), dimensions={}
  ROOT tuple.556 = (f32[2]{0}, pred[2]{0}, f32[2]{0}) tuple(select.555, Arg_0.548, broadcast.552)
}

jit_jvp_vmap_safe_mask__.557 {
  Arg_0.558 = pred[2]{0} parameter(0)
  Arg_1.559 = f32[2]{0} parameter(1)
  constant.560 = s32[] constant(0)
  call.563 = (f32[2]{0}, pred[2]{0}, f32[2]{0}) call(Arg_0.558, Arg_1.559, constant.560), to_apply=jit_jvp_vmap__where__.537
  get-tuple-element.564 = f32[2]{0} get-tuple-element(call.563), index=0
  sqrt.567 = f32[2]{0} sqrt(get-tuple-element.564)
  call.569 = (f32[2]{0}, pred[2]{0}, f32[2]{0}) call(Arg_0.558, sqrt.567, constant.560), to_apply=jit_jvp_vmap__where___1.547
  get-tuple-element.570 = f32[2]{0} get-tuple-element(call.569), index=0
  get-tuple-element.571 = pred[2]{0} get-tuple-element(call.569), index=1
  get-tuple-element.572 = f32[2]{0} get-tuple-element(call.569), index=2
  constant.561 = f32[] constant(0.5)
  broadcast.562 = f32[2]{0} broadcast(constant.561), dimensions={}
  divide.568 = f32[2]{0} divide(broadcast.562, sqrt.567)
  get-tuple-element.565 = pred[2]{0} get-tuple-element(call.563), index=1
  get-tuple-element.566 = f32[2]{0} get-tuple-element(call.563), index=2
  ROOT tuple.573 = (f32[2]{0}, pred[2]{0}, f32[2]{0}, f32[2]{0}, pred[2]{0}, /*index=5*/f32[2]{0}) tuple(get-tuple-element.570, get-tuple-element.571, get-tuple-element.572, divide.568, get-tuple-element.565, get-tuple-element.566)
}

jit_transpose_jvp_vmap__where___.585 {
  Arg_1.587 = f32[2]{0} parameter(1)
  Arg_0.586 = pred[2]{0} parameter(0)
  Arg_2.588 = f32[2]{0} parameter(2)
  constant.589 = f32[] constant(0)
  broadcast.590 = f32[2]{0} broadcast(constant.589), dimensions={}
  ROOT select.591 = f32[2]{0} select(Arg_0.586, Arg_2.588, broadcast.590)
}

jit_transpose_jvp_vmap__where____2.592 {
  Arg_1.594 = f32[2]{0} parameter(1)
  Arg_0.593 = pred[2]{0} parameter(0)
  Arg_2.595 = f32[2]{0} parameter(2)
  constant.596 = f32[] constant(0)
  broadcast.597 = f32[2]{0} broadcast(constant.596), dimensions={}
  ROOT select.598 = f32[2]{0} select(Arg_0.593, Arg_2.595, broadcast.597)
}

jit_transpose_jvp_vmap_safe_mask___.599 {
  Arg_3.603 = pred[2]{0} parameter(3)
  Arg_4.604 = f32[2]{0} parameter(4)
  Arg_0.600 = pred[2]{0} parameter(0)
  Arg_1.601 = f32[2]{0} parameter(1)
  Arg_5.605 = f32[2]{0} parameter(5)
  call.606 = f32[2]{0} call(Arg_0.600, Arg_1.601, Arg_5.605), to_apply=jit_transpose_jvp_vmap__where___.585
  Arg_2.602 = f32[2]{0} parameter(2)
  multiply.607 = f32[2]{0} multiply(call.606, Arg_2.602)
  ROOT call.608 = f32[2]{0} call(Arg_3.603, Arg_4.604, multiply.607), to_apply=jit_transpose_jvp_vmap__where____2.592
}

jit_transpose_jvp_vmap_remainder___.612 {
  Arg_0.613 = pred[2,3]{1,0} parameter(0)
  constant.615 = pred[] constant(false)
  broadcast.616 = pred[2,3]{1,0} broadcast(constant.615), dimensions={}
  compare.619 = pred[2,3]{1,0} compare(Arg_0.613, broadcast.616), direction=EQ
  Arg_1.614 = f32[2,3]{1,0} parameter(1)
  constant.617 = f32[] constant(0)
  broadcast.618 = f32[2,3]{1,0} broadcast(constant.617), dimensions={}
  select.620 = f32[2,3]{1,0} select(compare.619, Arg_1.614, broadcast.618)
  select.621 = f32[2,3]{1,0} select(Arg_0.613, Arg_1.614, broadcast.618)
  ROOT add.622 = f32[2,3]{1,0} add(select.620, select.621)
}

region_13.625 {
  Arg_0.626 = f32[] parameter(0)
  Arg_1.627 = f32[] parameter(1)
  ROOT add.628 = f32[] add(Arg_0.626, Arg_1.627)
}

region_14.630 {
  Arg_0.631 = f32[] parameter(0)
  Arg_1.632 = f32[] parameter(1)
  ROOT add.633 = f32[] add(Arg_0.631, Arg_1.632)
}

region_15.648 {
  Arg_0.649 = f32[] parameter(0)
  Arg_1.650 = f32[] parameter(1)
  ROOT add.651 = f32[] add(Arg_0.649, Arg_1.650)
}

jit_remainder_3.656 {
  Arg_0.657 = s32[] parameter(0)
  Arg_1.658 = s32[] parameter(1)
  remainder.660 = s32[] remainder(Arg_0.657, Arg_1.658)
  constant.659 = s32[] constant(0)
  compare.662 = pred[] compare(remainder.660, constant.659), direction=LT
  compare.663 = pred[] compare(Arg_1.658, constant.659), direction=LT
  compare.664 = pred[] compare(compare.662, compare.663), direction=NE
  compare.661 = pred[] compare(remainder.660, constant.659), direction=NE
  and.665 = pred[] and(compare.664, compare.661)
  add.666 = s32[] add(remainder.660, Arg_1.658)
  ROOT select.667 = s32[] select(and.665, add.666, remainder.660)
}

region_17.668 {
  Arg_0.669 = f32[] parameter(0)
  Arg_1.670 = f32[] parameter(1)
  ROOT add.671 = f32[] add(Arg_0.669, Arg_1.670)
}

region_18.672 {
  arg_tuple.673 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) parameter(0)
  get-tuple-element.674 = s32[] get-tuple-element(arg_tuple.673), index=0
  constant.684 = s32[] constant(1)
  add.769 = s32[] add(get-tuple-element.674, constant.684)
  get-tuple-element.679 = f32[] get-tuple-element(arg_tuple.673), index=5
  negate.749 = f32[] negate(get-tuple-element.679)
  negate.714 = f32[] negate(get-tuple-element.679)
  get-tuple-element.675 = f32[] get-tuple-element(arg_tuple.673), index=1
  multiply.715 = f32[] multiply(negate.714, get-tuple-element.675)
  exponential.716 = f32[] exponential(multiply.715)
  get-tuple-element.677 = f32[5]{0} get-tuple-element(arg_tuple.673), index=3
  constant.683 = s32[1,2]{1,0} constant({ { 3, 2 } })
  constant.685 = s32[] constant(0)
  compare.686 = pred[] compare(get-tuple-element.674, constant.685), direction=LT
  add.687 = s32[] add(get-tuple-element.674, constant.684)
  select.688 = s32[] select(compare.686, add.687, get-tuple-element.674)
  dynamic-slice.689 = s32[1,2]{1,0} dynamic-slice(constant.683, select.688, constant.685), dynamic_slice_sizes={1,2}
  reshape.690 = s32[2]{0} reshape(dynamic-slice.689)
  slice.691 = s32[1]{0} slice(reshape.690), slice={[0:1]}
  reshape.692 = s32[] reshape(slice.691)
  compare.717 = pred[] compare(reshape.692, constant.685), direction=LT
  constant.682 = s32[] constant(5)
  add.718 = s32[] add(reshape.692, constant.682)
  select.719 = s32[] select(compare.717, add.718, reshape.692)
  reshape.720 = s32[1]{0} reshape(select.719)
  gather.721 = f32[] gather(get-tuple-element.677, reshape.720), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.722 = f32[] multiply(exponential.716, gather.721)
  get-tuple-element.680 = f32[] get-tuple-element(arg_tuple.673), index=6
  subtract.693 = s32[] subtract(reshape.692, constant.684)
  compare.694 = pred[] compare(subtract.693, constant.685), direction=LT
  add.695 = s32[] add(subtract.693, constant.682)
  select.696 = s32[] select(compare.694, add.695, subtract.693)
  reshape.697 = s32[1]{0} reshape(select.696)
  gather.698 = f32[] gather(get-tuple-element.677, reshape.697), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.699 = f32[] multiply(gather.698, gather.698)
  get-tuple-element.678 = f32[5]{0} get-tuple-element(arg_tuple.673), index=4
  subtract.700 = s32[] subtract(reshape.692, constant.684)
  compare.701 = pred[] compare(subtract.700, constant.685), direction=LT
  add.702 = s32[] add(subtract.700, constant.682)
  select.703 = s32[] select(compare.701, add.702, subtract.700)
  reshape.704 = s32[1]{0} reshape(select.703)
  gather.705 = f32[] gather(get-tuple-element.678, reshape.704), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.706 = f32[] multiply(multiply.699, gather.705)
  constant.681 = f32[] constant(0.873661876)
  subtract.707 = f32[] subtract(multiply.706, constant.681)
  compare.708 = pred[] compare(reshape.692, constant.685), direction=LT
  add.709 = s32[] add(reshape.692, constant.682)
  select.710 = s32[] select(compare.708, add.709, reshape.692)
  reshape.711 = s32[1]{0} reshape(select.710)
  gather.712 = f32[] gather(get-tuple-element.678, reshape.711), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.713 = f32[] divide(subtract.707, gather.712)
  multiply.723 = f32[] multiply(get-tuple-element.680, divide.713)
  add.724 = f32[] add(multiply.722, multiply.723)
  multiply.725 = f32[] multiply(exponential.716, add.724)
  multiply.750 = f32[] multiply(negate.749, multiply.725)
  exponential.751 = f32[] exponential(multiply.750)
  slice.726 = s32[1]{0} slice(reshape.690), slice={[1:2]}
  reshape.727 = s32[] reshape(slice.726)
  compare.752 = pred[] compare(reshape.727, constant.685), direction=LT
  add.753 = s32[] add(reshape.727, constant.682)
  select.754 = s32[] select(compare.752, add.753, reshape.727)
  reshape.755 = s32[1]{0} reshape(select.754)
  gather.756 = f32[] gather(get-tuple-element.677, reshape.755), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.757 = f32[] multiply(exponential.751, gather.756)
  subtract.728 = s32[] subtract(reshape.727, constant.684)
  compare.729 = pred[] compare(subtract.728, constant.685), direction=LT
  add.730 = s32[] add(subtract.728, constant.682)
  select.731 = s32[] select(compare.729, add.730, subtract.728)
  reshape.732 = s32[1]{0} reshape(select.731)
  gather.733 = f32[] gather(get-tuple-element.677, reshape.732), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.734 = f32[] multiply(gather.733, gather.733)
  subtract.735 = s32[] subtract(reshape.727, constant.684)
  compare.736 = pred[] compare(subtract.735, constant.685), direction=LT
  add.737 = s32[] add(subtract.735, constant.682)
  select.738 = s32[] select(compare.736, add.737, subtract.735)
  reshape.739 = s32[1]{0} reshape(select.738)
  gather.740 = f32[] gather(get-tuple-element.678, reshape.739), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.741 = f32[] multiply(multiply.734, gather.740)
  subtract.742 = f32[] subtract(multiply.741, constant.681)
  compare.743 = pred[] compare(reshape.727, constant.685), direction=LT
  add.744 = s32[] add(reshape.727, constant.682)
  select.745 = s32[] select(compare.743, add.744, reshape.727)
  reshape.746 = s32[1]{0} reshape(select.745)
  gather.747 = f32[] gather(get-tuple-element.678, reshape.746), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.748 = f32[] divide(subtract.742, gather.747)
  multiply.758 = f32[] multiply(get-tuple-element.680, divide.748)
  add.759 = f32[] add(multiply.757, multiply.758)
  multiply.760 = f32[] multiply(exponential.751, add.759)
  get-tuple-element.676 = f32[1,2]{1,0} get-tuple-element(arg_tuple.673), index=2
  reshape.761 = f32[1]{0} reshape(multiply.725)
  reshape.762 = f32[1]{0} reshape(multiply.760)
  concatenate.763 = f32[2]{0} concatenate(reshape.761, reshape.762), dimensions={0}
  reshape.764 = f32[1,2]{1,0} reshape(concatenate.763)
  compare.765 = pred[] compare(get-tuple-element.674, constant.685), direction=LT
  add.766 = s32[] add(get-tuple-element.674, constant.684)
  select.767 = s32[] select(compare.765, add.766, get-tuple-element.674)
  dynamic-update-slice.768 = f32[1,2]{1,0} dynamic-update-slice(get-tuple-element.676, reshape.764, select.767, constant.685)
  ROOT tuple.770 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) tuple(add.769, multiply.760, dynamic-update-slice.768, get-tuple-element.677, get-tuple-element.678, get-tuple-element.679, get-tuple-element.680)
}

region_19.771 {
  arg_tuple.772 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) parameter(0)
  get-tuple-element.774 = f32[] get-tuple-element(arg_tuple.772), index=1
  get-tuple-element.775 = f32[1,2]{1,0} get-tuple-element(arg_tuple.772), index=2
  get-tuple-element.776 = f32[5]{0} get-tuple-element(arg_tuple.772), index=3
  get-tuple-element.777 = f32[5]{0} get-tuple-element(arg_tuple.772), index=4
  get-tuple-element.778 = f32[] get-tuple-element(arg_tuple.772), index=5
  get-tuple-element.779 = f32[] get-tuple-element(arg_tuple.772), index=6
  get-tuple-element.773 = s32[] get-tuple-element(arg_tuple.772), index=0
  constant.780 = s32[] constant(1)
  ROOT compare.781 = pred[] compare(get-tuple-element.773, constant.780), direction=LT
}

region_20.782 {
  Arg_0.783 = f32[] parameter(0)
  ROOT Arg_1.784 = f32[] parameter(1)
}

region_21.785 {
  Arg_0.786 = f32[] parameter(0)
  ROOT Arg_1.787 = f32[] parameter(1)
}

region_22.788 {
  arg_tuple.789 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) parameter(0)
  get-tuple-element.790 = s32[] get-tuple-element(arg_tuple.789), index=0
  constant.800 = s32[] constant(1)
  add.886 = s32[] add(get-tuple-element.790, constant.800)
  get-tuple-element.794 = f32[] get-tuple-element(arg_tuple.789), index=4
  negate.845 = f32[] negate(get-tuple-element.794)
  get-tuple-element.795 = f32[5]{0} get-tuple-element(arg_tuple.789), index=5
  get-tuple-element.793 = s32[2,2]{1,0} get-tuple-element(arg_tuple.789), index=3
  constant.802 = s32[] constant(0)
  compare.803 = pred[] compare(get-tuple-element.790, constant.802), direction=LT
  constant.801 = s32[] constant(2)
  add.804 = s32[] add(get-tuple-element.790, constant.801)
  select.805 = s32[] select(compare.803, add.804, get-tuple-element.790)
  dynamic-slice.806 = s32[1,2]{1,0} dynamic-slice(get-tuple-element.793, select.805, constant.802), dynamic_slice_sizes={1,2}
  reshape.807 = s32[2]{0} reshape(dynamic-slice.806)
  slice.843 = s32[1]{0} slice(reshape.807), slice={[1:2]}
  reshape.844 = s32[] reshape(slice.843)
  add.846 = s32[] add(reshape.844, constant.800)
  compare.847 = pred[] compare(add.846, constant.802), direction=LT
  constant.799 = s32[] constant(5)
  add.848 = s32[] add(add.846, constant.799)
  select.849 = s32[] select(compare.847, add.848, add.846)
  reshape.850 = s32[1]{0} reshape(select.849)
  gather.851 = f32[] gather(get-tuple-element.795, reshape.850), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.852 = f32[] multiply(negate.845, gather.851)
  exponential.853 = f32[] exponential(multiply.852)
  compare.854 = pred[] compare(reshape.844, constant.802), direction=LT
  add.855 = s32[] add(reshape.844, constant.799)
  select.856 = s32[] select(compare.854, add.855, reshape.844)
  reshape.857 = s32[1]{0} reshape(select.856)
  gather.858 = f32[] gather(get-tuple-element.795, reshape.857), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.859 = f32[] multiply(exponential.853, gather.858)
  get-tuple-element.796 = f32[] get-tuple-element(arg_tuple.789), index=6
  negate.810 = f32[] negate(get-tuple-element.794)
  slice.808 = s32[1]{0} slice(reshape.807), slice={[0:1]}
  reshape.809 = s32[] reshape(slice.808)
  add.811 = s32[] add(reshape.809, constant.800)
  compare.812 = pred[] compare(add.811, constant.802), direction=LT
  add.813 = s32[] add(add.811, constant.799)
  select.814 = s32[] select(compare.812, add.813, add.811)
  reshape.815 = s32[1]{0} reshape(select.814)
  gather.816 = f32[] gather(get-tuple-element.795, reshape.815), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.817 = f32[] multiply(negate.810, gather.816)
  exponential.818 = f32[] exponential(multiply.817)
  compare.819 = pred[] compare(reshape.809, constant.802), direction=LT
  add.820 = s32[] add(reshape.809, constant.799)
  select.821 = s32[] select(compare.819, add.820, reshape.809)
  reshape.822 = s32[1]{0} reshape(select.821)
  gather.823 = f32[] gather(get-tuple-element.795, reshape.822), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.824 = f32[] multiply(exponential.818, gather.823)
  get-tuple-element.791 = f32[] get-tuple-element(arg_tuple.789), index=1
  multiply.825 = f32[] multiply(get-tuple-element.796, get-tuple-element.791)
  add.826 = f32[] add(multiply.824, multiply.825)
  multiply.827 = f32[] multiply(exponential.818, add.826)
  multiply.828 = f32[] multiply(multiply.827, multiply.827)
  get-tuple-element.797 = f32[5]{0} get-tuple-element(arg_tuple.789), index=7
  compare.829 = pred[] compare(reshape.809, constant.802), direction=LT
  add.830 = s32[] add(reshape.809, constant.799)
  select.831 = s32[] select(compare.829, add.830, reshape.809)
  reshape.832 = s32[1]{0} reshape(select.831)
  gather.833 = f32[] gather(get-tuple-element.797, reshape.832), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.834 = f32[] multiply(multiply.828, gather.833)
  constant.798 = f32[] constant(0.873661876)
  subtract.835 = f32[] subtract(multiply.834, constant.798)
  add.836 = s32[] add(reshape.809, constant.800)
  compare.837 = pred[] compare(add.836, constant.802), direction=LT
  add.838 = s32[] add(add.836, constant.799)
  select.839 = s32[] select(compare.837, add.838, add.836)
  reshape.840 = s32[1]{0} reshape(select.839)
  gather.841 = f32[] gather(get-tuple-element.797, reshape.840), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.842 = f32[] divide(subtract.835, gather.841)
  multiply.860 = f32[] multiply(get-tuple-element.796, divide.842)
  add.861 = f32[] add(multiply.859, multiply.860)
  multiply.862 = f32[] multiply(exponential.853, add.861)
  multiply.863 = f32[] multiply(multiply.862, multiply.862)
  compare.864 = pred[] compare(reshape.844, constant.802), direction=LT
  add.865 = s32[] add(reshape.844, constant.799)
  select.866 = s32[] select(compare.864, add.865, reshape.844)
  reshape.867 = s32[1]{0} reshape(select.866)
  gather.868 = f32[] gather(get-tuple-element.797, reshape.867), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  multiply.869 = f32[] multiply(multiply.863, gather.868)
  subtract.870 = f32[] subtract(multiply.869, constant.798)
  add.871 = s32[] add(reshape.844, constant.800)
  compare.872 = pred[] compare(add.871, constant.802), direction=LT
  add.873 = s32[] add(add.871, constant.799)
  select.874 = s32[] select(compare.872, add.873, add.871)
  reshape.875 = s32[1]{0} reshape(select.874)
  gather.876 = f32[] gather(get-tuple-element.797, reshape.875), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  divide.877 = f32[] divide(subtract.870, gather.876)
  get-tuple-element.792 = f32[2,2]{1,0} get-tuple-element(arg_tuple.789), index=2
  reshape.878 = f32[1]{0} reshape(multiply.827)
  reshape.879 = f32[1]{0} reshape(multiply.862)
  concatenate.880 = f32[2]{0} concatenate(reshape.878, reshape.879), dimensions={0}
  reshape.881 = f32[1,2]{1,0} reshape(concatenate.880)
  compare.882 = pred[] compare(get-tuple-element.790, constant.802), direction=LT
  add.883 = s32[] add(get-tuple-element.790, constant.801)
  select.884 = s32[] select(compare.882, add.883, get-tuple-element.790)
  dynamic-update-slice.885 = f32[2,2]{1,0} dynamic-update-slice(get-tuple-element.792, reshape.881, select.884, constant.802)
  ROOT tuple.887 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) tuple(add.886, divide.877, dynamic-update-slice.885, get-tuple-element.793, get-tuple-element.794, get-tuple-element.795, get-tuple-element.796, get-tuple-element.797)
}

region_23.888 {
  arg_tuple.889 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) parameter(0)
  get-tuple-element.891 = f32[] get-tuple-element(arg_tuple.889), index=1
  get-tuple-element.892 = f32[2,2]{1,0} get-tuple-element(arg_tuple.889), index=2
  get-tuple-element.893 = s32[2,2]{1,0} get-tuple-element(arg_tuple.889), index=3
  get-tuple-element.894 = f32[] get-tuple-element(arg_tuple.889), index=4
  get-tuple-element.895 = f32[5]{0} get-tuple-element(arg_tuple.889), index=5
  get-tuple-element.896 = f32[] get-tuple-element(arg_tuple.889), index=6
  get-tuple-element.897 = f32[5]{0} get-tuple-element(arg_tuple.889), index=7
  get-tuple-element.890 = s32[] get-tuple-element(arg_tuple.889), index=0
  constant.898 = s32[] constant(2)
  ROOT compare.899 = pred[] compare(get-tuple-element.890, constant.898), direction=LT
}

region_24.900 {
  Arg_0.901 = f32[] parameter(0)
  ROOT Arg_1.902 = f32[] parameter(1)
}

region_25.903 {
  Arg_0.904 = f32[] parameter(0)
  Arg_1.905 = f32[] parameter(1)
  ROOT add.906 = f32[] add(Arg_0.904, Arg_1.905)
}

region_16.907 {
  constant.936 = s32[] constant(0)
  arg_tuple.908 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) parameter(0)
  get-tuple-element.912 = f32[5]{0} get-tuple-element(arg_tuple.908), index=3
  constant.929 = s32[1]{0} constant({4})
  constant.933 = f32[3]{0} constant({0.828981519, -0.657963097, 0.828981519})
  get-tuple-element.915 = s32[6]{0} get-tuple-element(arg_tuple.908), index=6
  get-tuple-element.909 = s32[] get-tuple-element(arg_tuple.908), index=0
  compare.937 = pred[] compare(get-tuple-element.909, constant.936), direction=LT
  constant.935 = s32[] constant(6)
  add.938 = s32[] add(get-tuple-element.909, constant.935)
  select.939 = s32[] select(compare.937, add.938, get-tuple-element.909)
  dynamic-slice.940 = s32[1]{0} dynamic-slice(get-tuple-element.915, select.939), dynamic_slice_sizes={1}
  reshape.941 = s32[] reshape(dynamic-slice.940)
  constant.934 = s32[] constant(3)
  call.942 = s32[] call(reshape.941, constant.934), to_apply=jit_remainder_3.656
  compare.943 = pred[] compare(call.942, constant.936), direction=LT
  add.944 = s32[] add(call.942, constant.934)
  select.945 = s32[] select(compare.943, add.944, call.942)
  reshape.946 = s32[1]{0} reshape(select.945)
  gather.947 = f32[] gather(constant.933, reshape.946), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  constant.932 = f32[] constant(0.0005)
  multiply.948 = f32[] multiply(gather.947, constant.932)
  constant.931 = f32[] constant(2)
  divide.949 = f32[] divide(multiply.948, constant.931)
  divide.950 = f32[] divide(divide.949, constant.931)
  slice.952 = f32[1]{0} slice(get-tuple-element.912), slice={[3:4]}
  reshape.953 = f32[] reshape(slice.952)
  power.954 = f32[] power(reshape.953, constant.931)
  get-tuple-element.916 = f32[5]{0} get-tuple-element(arg_tuple.908), index=7
  slice.955 = f32[1]{0} slice(get-tuple-element.916), slice={[3:4]}
  reshape.956 = f32[] reshape(slice.955)
  multiply.957 = f32[] multiply(power.954, reshape.956)
  constant.930 = f32[] constant(0.873661876)
  subtract.958 = f32[] subtract(multiply.957, constant.930)
  slice.959 = f32[1]{0} slice(get-tuple-element.916), slice={[4:5]}
  reshape.960 = f32[] reshape(slice.959)
  divide.961 = f32[] divide(subtract.958, reshape.960)
  multiply.962 = f32[] multiply(divide.950, divide.961)
  scatter.963 = f32[5]{0} scatter(get-tuple-element.912, constant.929, multiply.962), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_17.668
  slice.964 = f32[1]{0} slice(scatter.963), slice={[4:5]}
  reshape.965 = f32[] reshape(slice.964)
  constant.927 = f32[] constant(0)
  broadcast.928 = f32[1,2]{1,0} broadcast(constant.927), dimensions={}
  divide.951 = f32[] divide(divide.950, constant.931)
  tuple.966 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) tuple(constant.936, reshape.965, broadcast.928, scatter.963, get-tuple-element.916, divide.951, divide.950)
  while.967 = (s32[], f32[], f32[1,2]{1,0}, f32[5]{0}, f32[5]{0}, /*index=5*/f32[], f32[]) while(tuple.966), condition=region_19.771, body=region_18.672
  get-tuple-element.968 = s32[] get-tuple-element(while.967), index=0
  get-tuple-element.971 = f32[5]{0} get-tuple-element(while.967), index=3
  get-tuple-element.972 = f32[5]{0} get-tuple-element(while.967), index=4
  get-tuple-element.973 = f32[] get-tuple-element(while.967), index=5
  get-tuple-element.974 = f32[] get-tuple-element(while.967), index=6
  get-tuple-element.913 = f32[] get-tuple-element(arg_tuple.908), index=4
  negate.1015 = f32[] negate(divide.949)
  constant.926 = s32[3,1]{1,0} constant({ {3}, {2}, {1} })
  get-tuple-element.970 = f32[1,2]{1,0} get-tuple-element(while.967), index=2
  reshape.975 = f32[2]{0} reshape(get-tuple-element.970)
  negate.986 = f32[] negate(divide.951)
  get-tuple-element.969 = f32[] get-tuple-element(while.967), index=1
  multiply.987 = f32[] multiply(negate.986, get-tuple-element.969)
  exponential.988 = f32[] exponential(multiply.987)
  slice.989 = f32[1]{0} slice(scatter.963), slice={[1:2]}
  reshape.990 = f32[] reshape(slice.989)
  multiply.991 = f32[] multiply(exponential.988, reshape.990)
  slice.976 = f32[1]{0} slice(scatter.963), slice={[0:1]}
  reshape.977 = f32[] reshape(slice.976)
  multiply.978 = f32[] multiply(reshape.977, reshape.977)
  slice.979 = f32[1]{0} slice(get-tuple-element.916), slice={[0:1]}
  reshape.980 = f32[] reshape(slice.979)
  multiply.981 = f32[] multiply(multiply.978, reshape.980)
  subtract.982 = f32[] subtract(multiply.981, constant.930)
  slice.983 = f32[1]{0} slice(get-tuple-element.916), slice={[1:2]}
  reshape.984 = f32[] reshape(slice.983)
  divide.985 = f32[] divide(subtract.982, reshape.984)
  multiply.992 = f32[] multiply(divide.950, divide.985)
  add.993 = f32[] add(multiply.991, multiply.992)
  multiply.994 = f32[] multiply(exponential.988, add.993)
  reshape.995 = f32[1]{0} reshape(multiply.994)
  concatenate.996 = f32[3]{0} concatenate(reshape.975, reshape.995), dimensions={0}
  scatter.997 = f32[5]{0} scatter(scatter.963, constant.926, concatenate.996), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=region_20.782
  constant.924 = s32[1]{0} constant({0})
  negate.1003 = f32[] negate(divide.951)
  slice.1004 = f32[1]{0} slice(scatter.997), slice={[1:2]}
  reshape.1005 = f32[] reshape(slice.1004)
  multiply.1006 = f32[] multiply(negate.1003, reshape.1005)
  exponential.1007 = f32[] exponential(multiply.1006)
  slice.1008 = f32[1]{0} slice(scatter.997), slice={[0:1]}
  reshape.1009 = f32[] reshape(slice.1008)
  multiply.1010 = f32[] multiply(exponential.1007, reshape.1009)
  multiply.998 = f32[] multiply(get-tuple-element.913, constant.931)
  constant.925 = f32[] constant(2620.9856)
  subtract.999 = f32[] subtract(multiply.998, constant.925)
  slice.1000 = f32[1]{0} slice(get-tuple-element.916), slice={[0:1]}
  reshape.1001 = f32[] reshape(slice.1000)
  divide.1002 = f32[] divide(subtract.999, reshape.1001)
  multiply.1011 = f32[] multiply(divide.950, divide.1002)
  add.1012 = f32[] add(multiply.1010, multiply.1011)
  multiply.1013 = f32[] multiply(exponential.1007, add.1012)
  scatter.1014 = f32[5]{0} scatter(scatter.997, constant.924, multiply.1013), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_21.785
  slice.1016 = f32[1]{0} slice(scatter.1014), slice={[0:1]}
  reshape.1017 = f32[] reshape(slice.1016)
  multiply.1018 = f32[] multiply(negate.1015, reshape.1017)
  exponential.1019 = f32[] exponential(multiply.1018)
  power.1020 = f32[] power(exponential.1019, constant.931)
  multiply.1021 = f32[] multiply(get-tuple-element.913, power.1020)
  multiply.1027 = f32[] multiply(multiply.1021, constant.931)
  subtract.1028 = f32[] subtract(multiply.1027, constant.925)
  slice.1029 = f32[1]{0} slice(get-tuple-element.916), slice={[0:1]}
  reshape.1030 = f32[] reshape(slice.1029)
  divide.1031 = f32[] divide(subtract.1028, reshape.1030)
  constant.922 = f32[] constant(0)
  broadcast.923 = f32[2,2]{1,0} broadcast(constant.922), dimensions={}
  iota.1032 = s32[4]{0} iota(), iota_dimension=0
  reshape.1033 = s32[2,2]{1,0} reshape(iota.1032)
  tuple.1034 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) tuple(constant.936, divide.1031, broadcast.923, reshape.1033, divide.951, scatter.1014, divide.950, get-tuple-element.916)
  while.1035 = (s32[], f32[], f32[2,2]{1,0}, s32[2,2]{1,0}, f32[], /*index=5*/f32[5]{0}, f32[], f32[5]{0}) while(tuple.1034), condition=region_23.888, body=region_22.788
  get-tuple-element.1036 = s32[] get-tuple-element(while.1035), index=0
  get-tuple-element.1039 = s32[2,2]{1,0} get-tuple-element(while.1035), index=3
  get-tuple-element.1040 = f32[] get-tuple-element(while.1035), index=4
  get-tuple-element.1041 = f32[5]{0} get-tuple-element(while.1035), index=5
  get-tuple-element.1042 = f32[] get-tuple-element(while.1035), index=6
  get-tuple-element.1043 = f32[5]{0} get-tuple-element(while.1035), index=7
  constant.917 = s32[] constant(1)
  add.1056 = s32[] add(get-tuple-element.909, constant.917)
  get-tuple-element.910 = f32[1000,3]{1,0} get-tuple-element(arg_tuple.908), index=1
  broadcast.1022 = f32[1000,3]{1,0} broadcast(exponential.1019), dimensions={}
  multiply.1023 = f32[1000,3]{1,0} multiply(get-tuple-element.910, broadcast.1022)
  get-tuple-element.911 = f32[5]{0} get-tuple-element(arg_tuple.908), index=2
  broadcast.1024 = f32[5]{0} broadcast(divide.949), dimensions={}
  multiply.1025 = f32[5]{0} multiply(broadcast.1024, scatter.1014)
  add.1026 = f32[5]{0} add(get-tuple-element.911, multiply.1025)
  constant.920 = s32[] constant(0)
  broadcast.921 = s32[4]{0} broadcast(constant.920), dimensions={}
  compare.1045 = pred[4]{0} compare(iota.1032, broadcast.921), direction=LT
  constant.918 = s32[] constant(5)
  broadcast.919 = s32[4]{0} broadcast(constant.918), dimensions={}
  add.1046 = s32[4]{0} add(iota.1032, broadcast.919)
  select.1047 = s32[4]{0} select(compare.1045, add.1046, iota.1032)
  reshape.1048 = s32[4,1]{1,0} reshape(select.1047)
  get-tuple-element.1038 = f32[2,2]{1,0} get-tuple-element(while.1035), index=2
  reshape.1044 = f32[4]{0} reshape(get-tuple-element.1038)
  scatter.1049 = f32[5]{0} scatter(scatter.1014, reshape.1048, reshape.1044), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=region_24.900
  get-tuple-element.1037 = f32[] get-tuple-element(while.1035), index=1
  multiply.1050 = f32[] multiply(divide.950, get-tuple-element.1037)
  scatter.1051 = f32[5]{0} scatter(scatter.1049, constant.929, multiply.1050), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_25.903
  get-tuple-element.914 = s32[6]{0} get-tuple-element(arg_tuple.908), index=5
  compare.1052 = pred[] compare(get-tuple-element.909, constant.936), direction=LT
  add.1053 = s32[] add(get-tuple-element.909, constant.935)
  select.1054 = s32[] select(compare.1052, add.1053, get-tuple-element.909)
  dynamic-update-slice.1055 = s32[6]{0} dynamic-update-slice(get-tuple-element.914, constant.924, select.1054)
  ROOT tuple.1057 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) tuple(add.1056, multiply.1023, add.1026, scatter.1051, multiply.1021, dynamic-update-slice.1055, get-tuple-element.915, get-tuple-element.916)
}

region_26.1058 {
  arg_tuple.1059 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) parameter(0)
  get-tuple-element.1061 = f32[1000,3]{1,0} get-tuple-element(arg_tuple.1059), index=1
  get-tuple-element.1062 = f32[5]{0} get-tuple-element(arg_tuple.1059), index=2
  get-tuple-element.1063 = f32[5]{0} get-tuple-element(arg_tuple.1059), index=3
  get-tuple-element.1064 = f32[] get-tuple-element(arg_tuple.1059), index=4
  get-tuple-element.1065 = s32[6]{0} get-tuple-element(arg_tuple.1059), index=5
  get-tuple-element.1066 = s32[6]{0} get-tuple-element(arg_tuple.1059), index=6
  get-tuple-element.1067 = f32[5]{0} get-tuple-element(arg_tuple.1059), index=7
  get-tuple-element.1060 = s32[] get-tuple-element(arg_tuple.1059), index=0
  constant.1068 = s32[] constant(6)
  ROOT compare.1069 = pred[] compare(get-tuple-element.1060, constant.1068), direction=LT
}

ENTRY main.1080 {
  constant.9 = s32[] constant(0)
  Arg_1.2 = f32[1000,3]{1,0} parameter(1)
  Arg_4.5 = f32[5]{0} parameter(4)
  Arg_5.6 = f32[5]{0} parameter(5)
  Arg_7.8 = f32[] parameter(7)
  constant.10 = s32[] constant(0)
  broadcast.11 = s32[6]{0} broadcast(constant.10), dimensions={}
  iota.51 = s32[6]{0} iota(), iota_dimension=0
  Arg_6.7 = f32[] parameter(6)
  constant.13 = f32[] constant(2)
  power.43 = f32[] power(Arg_6.7, constant.13)
  constant.12 = f32[] constant(0.873661876)
  multiply.44 = f32[] multiply(power.43, constant.12)
  broadcast.45 = f32[5]{0} broadcast(multiply.44), dimensions={}
  constant.35 = s32[1]{0} constant({0})
  constant.42 = f32[] constant(3000)
  scatter.50 = f32[5]{0} scatter(broadcast.45, constant.35, constant.42), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_0.46
  tuple.52 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) tuple(constant.9, Arg_1.2, Arg_4.5, Arg_5.6, Arg_7.8, broadcast.11, iota.51, scatter.50)
  while.467 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) while(tuple.52), condition=region_11.455, body=region_1.304
  get-tuple-element.468 = s32[] get-tuple-element(while.467), index=0
  get-tuple-element.472 = f32[] get-tuple-element(while.467), index=4
  get-tuple-element.473 = s32[6]{0} get-tuple-element(while.467), index=5
  get-tuple-element.474 = s32[6]{0} get-tuple-element(while.467), index=6
  get-tuple-element.475 = f32[5]{0} get-tuple-element(while.467), index=7
  get-tuple-element.469 = f32[1000,3]{1,0} get-tuple-element(while.467), index=1
  Arg_2.3 = f32[1000,3]{1,0} parameter(2)
  constant.18 = f32[] constant(0)
  broadcast.19 = f32[1000,3]{1,0} broadcast(constant.18), dimensions={}
  constant.33 = s32[2,1]{1,0} constant({ {1}, {0} })
  Arg_0.1 = f32[1000,3]{1,0} parameter(0)
  constant.38 = f32[] constant(0.001)
  broadcast.39 = f32[1000,3]{1,0} broadcast(constant.38), dimensions={}
  multiply.477 = f32[1000,3]{1,0} multiply(get-tuple-element.469, broadcast.39)
  constant.36 = f32[] constant(5.00000056e-07)
  broadcast.37 = f32[1000,3]{1,0} broadcast(constant.36), dimensions={}
  multiply.478 = f32[1000,3]{1,0} multiply(Arg_2.3, broadcast.37)
  constant.40 = f32[] constant(1)
  broadcast.41 = f32[1000,1]{1,0} broadcast(constant.40), dimensions={}
  Arg_3.4 = f32[1000,1]{1,0} parameter(3)
  divide.476 = f32[1000,1]{1,0} divide(broadcast.41, Arg_3.4)
  broadcast.479 = f32[1000,1]{1,0} broadcast(divide.476), dimensions={0,1}
  reshape.480 = f32[1000]{0} reshape(broadcast.479)
  broadcast.481 = f32[1000,3]{1,0} broadcast(reshape.480), dimensions={0}
  multiply.482 = f32[1000,3]{1,0} multiply(multiply.478, broadcast.481)
  add.483 = f32[1000,3]{1,0} add(multiply.477, multiply.482)
  add.484 = f32[1000,3]{1,0} add(Arg_0.1, add.483)
  constant.32 = f32[] constant(9.41036)
  call.502 = f32[1000,3]{1,0} call(add.484, constant.32), to_apply=jit_remainder_0.485
  constant.34 = s32[2,1]{1,0} constant({ {0}, {999} })
  gather.503 = f32[2,3]{1,0} gather(call.502, constant.34), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,3}
  gather.504 = f32[2,3]{1,0} gather(call.502, constant.33), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,3}
  subtract.505 = f32[2,3]{1,0} subtract(gather.503, gather.504)
  constant.30 = f32[] constant(4.70518)
  broadcast.31 = f32[2,3]{1,0} broadcast(constant.30), dimensions={}
  add.506 = f32[2,3]{1,0} add(subtract.505, broadcast.31)
  call.525 = (f32[2,3]{1,0}, pred[2,3]{1,0}) call(add.506, constant.32), to_apply=jit_jvp_vmap_remainder__.507
  get-tuple-element.527 = pred[2,3]{1,0} get-tuple-element(call.525), index=1
  get-tuple-element.526 = f32[2,3]{1,0} get-tuple-element(call.525), index=0
  subtract.528 = f32[2,3]{1,0} subtract(get-tuple-element.526, broadcast.31)
  multiply.529 = f32[2,3]{1,0} multiply(subtract.528, subtract.528)
  constant.15 = f32[] constant(0)
  reduce.535 = f32[2]{0} reduce(multiply.529, constant.15), dimensions={1}, to_apply=region_12.531
  constant.26 = f32[] constant(0)
  broadcast.27 = f32[2]{0} broadcast(constant.26), dimensions={}
  compare.536 = pred[2]{0} compare(reduce.535, broadcast.27), direction=GT
  call.574 = (f32[2]{0}, pred[2]{0}, f32[2]{0}, f32[2]{0}, pred[2]{0}, /*index=5*/f32[2]{0}) call(compare.536, reduce.535), to_apply=jit_jvp_vmap_safe_mask__.557
  get-tuple-element.576 = pred[2]{0} get-tuple-element(call.574), index=1
  get-tuple-element.577 = f32[2]{0} get-tuple-element(call.574), index=2
  get-tuple-element.578 = f32[2]{0} get-tuple-element(call.574), index=3
  get-tuple-element.579 = pred[2]{0} get-tuple-element(call.574), index=4
  get-tuple-element.580 = f32[2]{0} get-tuple-element(call.574), index=5
  get-tuple-element.575 = f32[2]{0} get-tuple-element(call.574), index=0
  constant.24 = f32[] constant(1)
  broadcast.25 = f32[2]{0} broadcast(constant.24), dimensions={}
  subtract.581 = f32[2]{0} subtract(get-tuple-element.575, broadcast.25)
  power.582 = f32[2]{0} power(subtract.581, broadcast.25)
  constant.22 = f32[] constant(2)
  broadcast.23 = f32[2]{0} broadcast(constant.22), dimensions={}
  multiply.583 = f32[2]{0} multiply(power.582, broadcast.23)
  constant.20 = f32[] constant(-0.5)
  broadcast.21 = f32[2]{0} broadcast(constant.20), dimensions={}
  multiply.584 = f32[2]{0} multiply(multiply.583, broadcast.21)
  call.609 = f32[2]{0} call(get-tuple-element.576, get-tuple-element.577, get-tuple-element.578, get-tuple-element.579, get-tuple-element.580, multiply.584), to_apply=jit_transpose_jvp_vmap_safe_mask___.599
  broadcast.610 = f32[2,3]{1,0} broadcast(call.609), dimensions={0}
  constant.28 = f32[] constant(2)
  broadcast.29 = f32[2,3]{1,0} broadcast(constant.28), dimensions={}
  multiply.530 = f32[2,3]{1,0} multiply(subtract.528, broadcast.29)
  multiply.611 = f32[2,3]{1,0} multiply(broadcast.610, multiply.530)
  call.623 = f32[2,3]{1,0} call(get-tuple-element.527, multiply.611), to_apply=jit_transpose_jvp_vmap_remainder___.612
  negate.624 = f32[2,3]{1,0} negate(call.623)
  scatter.629 = f32[1000,3]{1,0} scatter(broadcast.19, constant.33, negate.624), update_window_dims={1}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=region_13.625
  scatter.634 = f32[1000,3]{1,0} scatter(broadcast.19, constant.34, call.623), update_window_dims={1}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=region_14.630
  add.635 = f32[1000,3]{1,0} add(scatter.629, scatter.634)
  add.636 = f32[1000,3]{1,0} add(Arg_2.3, add.635)
  constant.16 = f32[] constant(0.0005)
  broadcast.17 = f32[1000,3]{1,0} broadcast(constant.16), dimensions={}
  multiply.637 = f32[1000,3]{1,0} multiply(add.636, broadcast.17)
  broadcast.638 = f32[1000,1]{1,0} broadcast(divide.476), dimensions={0,1}
  reshape.639 = f32[1000]{0} reshape(broadcast.638)
  broadcast.640 = f32[1000,3]{1,0} broadcast(reshape.639), dimensions={0}
  multiply.641 = f32[1000,3]{1,0} multiply(multiply.637, broadcast.640)
  add.642 = f32[1000,3]{1,0} add(get-tuple-element.469, multiply.641)
  get-tuple-element.470 = f32[5]{0} get-tuple-element(while.467), index=2
  get-tuple-element.471 = f32[5]{0} get-tuple-element(while.467), index=3
  broadcast.644 = f32[1000,1]{1,0} broadcast(Arg_3.4), dimensions={0,1}
  reshape.645 = f32[1000]{0} reshape(broadcast.644)
  broadcast.646 = f32[1000,3]{1,0} broadcast(reshape.645), dimensions={0}
  multiply.643 = f32[1000,3]{1,0} multiply(add.642, add.642)
  multiply.647 = f32[1000,3]{1,0} multiply(broadcast.646, multiply.643)
  reduce.652 = f32[] reduce(multiply.647, constant.15), dimensions={0,1}, to_apply=region_15.648
  constant.14 = f32[] constant(0.5)
  multiply.653 = f32[] multiply(reduce.652, constant.14)
  iota.654 = s32[6]{0} iota(), iota_dimension=0
  tuple.655 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) tuple(constant.9, add.642, get-tuple-element.470, get-tuple-element.471, multiply.653, broadcast.11, iota.654, scatter.50)
  while.1070 = (s32[], f32[1000,3]{1,0}, f32[5]{0}, f32[5]{0}, f32[], /*index=5*/s32[6]{0}, s32[6]{0}, f32[5]{0}) while(tuple.655), condition=region_26.1058, body=region_16.907
  get-tuple-element.1071 = s32[] get-tuple-element(while.1070), index=0
  get-tuple-element.1076 = s32[6]{0} get-tuple-element(while.1070), index=5
  get-tuple-element.1077 = s32[6]{0} get-tuple-element(while.1070), index=6
  get-tuple-element.1078 = f32[5]{0} get-tuple-element(while.1070), index=7
  get-tuple-element.1072 = f32[1000,3]{1,0} get-tuple-element(while.1070), index=1
  get-tuple-element.1073 = f32[5]{0} get-tuple-element(while.1070), index=2
  get-tuple-element.1074 = f32[5]{0} get-tuple-element(while.1070), index=3
  get-tuple-element.1075 = f32[] get-tuple-element(while.1070), index=4
  ROOT tuple.1079 = (f32[1000,3]{1,0}, f32[1000,3]{1,0}, f32[1000,3]{1,0}, f32[1000,1]{1,0}, f32[5]{0}, /*index=5*/f32[5]{0}, f32[5]{0}, f32[], f32[]) tuple(call.502, get-tuple-element.1072, add.635, Arg_3.4, get-tuple-element.1073, get-tuple-element.1074, scatter.50, Arg_6.7, get-tuple-element.1075)
}

