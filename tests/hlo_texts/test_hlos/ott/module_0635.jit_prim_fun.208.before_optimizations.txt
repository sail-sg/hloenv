HloModule jit_prim_fun.208

region_2.24 {
  Arg_0.25 = f32[] parameter(0)
  Arg_1.26 = f32[] parameter(1)
  ROOT maximum.27 = f32[] maximum(Arg_0.25, Arg_1.26)
}

isfinite_2.28 {
  Arg_0.29 = f32[5]{0} parameter(0)
  ROOT is-finite.30 = pred[5]{0} is-finite(Arg_0.29)
}

region_3.31 {
  Arg_0.32 = f32[] parameter(0)
  Arg_1.33 = f32[] parameter(1)
  ROOT add.34 = f32[] add(Arg_0.32, Arg_1.33)
}

isnan_3.35 {
  Arg_0.36 = f32[5]{0} parameter(0)
  ROOT compare.37 = pred[5]{0} compare(Arg_0.36, Arg_0.36), direction=NE
}

_where.38 {
  Arg_0.39 = pred[5]{0} parameter(0)
  Arg_1.40 = f32[5]{0} parameter(1)
  Arg_2.41 = f32[] parameter(2)
  broadcast.42 = f32[5]{0} broadcast(Arg_2.41), dimensions={}
  ROOT select.43 = f32[5]{0} select(Arg_0.39, Arg_1.40, broadcast.42)
}

_where_4.44 {
  Arg_0.45 = pred[5]{0} parameter(0)
  Arg_1.46 = f32[] parameter(1)
  broadcast.48 = f32[5]{0} broadcast(Arg_1.46), dimensions={}
  Arg_2.47 = f32[5]{0} parameter(2)
  ROOT select.49 = f32[5]{0} select(Arg_0.45, broadcast.48, Arg_2.47)
}

isfinite_5.50 {
  Arg_0.51 = f32[5]{0} parameter(0)
  ROOT is-finite.52 = pred[5]{0} is-finite(Arg_0.51)
}

_where_6.53 {
  Arg_0.54 = pred[5]{0} parameter(0)
  Arg_1.55 = f32[5]{0} parameter(1)
  Arg_2.56 = s32[] parameter(2)
  convert.57 = f32[] convert(Arg_2.56)
  broadcast.58 = f32[5]{0} broadcast(convert.57), dimensions={}
  ROOT select.59 = f32[5]{0} select(Arg_0.54, Arg_1.55, broadcast.58)
}

region_4.60 {
  Arg_0.61 = f32[] parameter(0)
  Arg_1.62 = f32[] parameter(1)
  ROOT maximum.63 = f32[] maximum(Arg_0.61, Arg_1.62)
}

isfinite_7.64 {
  Arg_0.65 = f32[6]{0} parameter(0)
  ROOT is-finite.66 = pred[6]{0} is-finite(Arg_0.65)
}

region_5.67 {
  Arg_0.68 = f32[] parameter(0)
  Arg_1.69 = f32[] parameter(1)
  ROOT add.70 = f32[] add(Arg_0.68, Arg_1.69)
}

isnan_8.71 {
  Arg_0.72 = f32[6]{0} parameter(0)
  ROOT compare.73 = pred[6]{0} compare(Arg_0.72, Arg_0.72), direction=NE
}

_where_9.74 {
  Arg_0.75 = pred[6]{0} parameter(0)
  Arg_1.76 = f32[6]{0} parameter(1)
  Arg_2.77 = f32[] parameter(2)
  broadcast.78 = f32[6]{0} broadcast(Arg_2.77), dimensions={}
  ROOT select.79 = f32[6]{0} select(Arg_0.75, Arg_1.76, broadcast.78)
}

_where_10.80 {
  Arg_0.81 = pred[6]{0} parameter(0)
  Arg_1.82 = f32[] parameter(1)
  broadcast.84 = f32[6]{0} broadcast(Arg_1.82), dimensions={}
  Arg_2.83 = f32[6]{0} parameter(2)
  ROOT select.85 = f32[6]{0} select(Arg_0.81, broadcast.84, Arg_2.83)
}

isfinite_11.86 {
  Arg_0.87 = f32[6]{0} parameter(0)
  ROOT is-finite.88 = pred[6]{0} is-finite(Arg_0.87)
}

_where_12.89 {
  Arg_0.90 = pred[6]{0} parameter(0)
  Arg_1.91 = f32[6]{0} parameter(1)
  Arg_2.92 = s32[] parameter(2)
  convert.93 = f32[] convert(Arg_2.92)
  broadcast.94 = f32[6]{0} broadcast(convert.93), dimensions={}
  ROOT select.95 = f32[6]{0} select(Arg_0.90, Arg_1.91, broadcast.94)
}

diff.96 {
  Arg_0.97 = f32[10]{0} parameter(0)
  slice.98 = f32[9]{0} slice(Arg_0.97), slice={[1:10]}
  slice.99 = f32[9]{0} slice(Arg_0.97), slice={[0:9]}
  ROOT subtract.100 = f32[9]{0} subtract(slice.98, slice.99)
}

region_6.101 {
  Arg_0.102 = f32[] parameter(0)
  Arg_1.103 = f32[] parameter(1)
  ROOT add.104 = f32[] add(Arg_0.102, Arg_1.103)
}

region_7.105 {
  Arg_0.106 = f32[] parameter(0)
  Arg_1.107 = f32[] parameter(1)
  ROOT add.108 = f32[] add(Arg_0.106, Arg_1.107)
}

region_8.109 {
  Arg_0.110 = f32[] parameter(0)
  Arg_1.111 = f32[] parameter(1)
  ROOT add.112 = f32[] add(Arg_0.110, Arg_1.111)
}

region_9.113 {
  Arg_0.114 = f32[] parameter(0)
  Arg_1.115 = f32[] parameter(1)
  ROOT add.116 = f32[] add(Arg_0.114, Arg_1.115)
}

region_10.117 {
  Arg_0.118 = f32[] parameter(0)
  Arg_1.119 = f32[] parameter(1)
  ROOT add.120 = f32[] add(Arg_0.118, Arg_1.119)
}

region_11.121 {
  Arg_0.122 = f32[] parameter(0)
  Arg_1.123 = f32[] parameter(1)
  ROOT add.124 = f32[] add(Arg_0.122, Arg_1.123)
}

_where_13.125 {
  Arg_0.126 = pred[] parameter(0)
  broadcast.129 = pred[5,1]{1,0} broadcast(Arg_0.126), dimensions={}
  Arg_1.127 = f32[5,1]{1,0} parameter(1)
  Arg_2.128 = f32[5,1]{1,0} parameter(2)
  ROOT select.130 = f32[5,1]{1,0} select(broadcast.129, Arg_1.127, Arg_2.128)
}

diff_14.131 {
  Arg_0.132 = f32[10]{0} parameter(0)
  slice.133 = f32[9]{0} slice(Arg_0.132), slice={[1:10]}
  slice.134 = f32[9]{0} slice(Arg_0.132), slice={[0:9]}
  ROOT subtract.135 = f32[9]{0} subtract(slice.133, slice.134)
}

region_12.136 {
  Arg_0.137 = f32[] parameter(0)
  Arg_1.138 = f32[] parameter(1)
  ROOT add.139 = f32[] add(Arg_0.137, Arg_1.138)
}

region_13.140 {
  Arg_0.141 = f32[] parameter(0)
  Arg_1.142 = f32[] parameter(1)
  ROOT add.143 = f32[] add(Arg_0.141, Arg_1.142)
}

region_14.144 {
  Arg_0.145 = f32[] parameter(0)
  Arg_1.146 = f32[] parameter(1)
  ROOT add.147 = f32[] add(Arg_0.145, Arg_1.146)
}

region_15.148 {
  Arg_0.149 = f32[] parameter(0)
  Arg_1.150 = f32[] parameter(1)
  ROOT add.151 = f32[] add(Arg_0.149, Arg_1.150)
}

region_16.152 {
  Arg_0.153 = f32[] parameter(0)
  Arg_1.154 = f32[] parameter(1)
  ROOT add.155 = f32[] add(Arg_0.153, Arg_1.154)
}

region_17.156 {
  Arg_0.157 = f32[] parameter(0)
  Arg_1.158 = f32[] parameter(1)
  ROOT add.159 = f32[] add(Arg_0.157, Arg_1.158)
}

_where_15.160 {
  Arg_0.161 = pred[] parameter(0)
  broadcast.164 = pred[6,1]{1,0} broadcast(Arg_0.161), dimensions={}
  Arg_1.162 = f32[6,1]{1,0} parameter(1)
  Arg_2.163 = f32[6,1]{1,0} parameter(2)
  ROOT select.165 = f32[6,1]{1,0} select(broadcast.164, Arg_1.162, Arg_2.163)
}

diff_16.166 {
  Arg_0.167 = f32[10]{0} parameter(0)
  slice.168 = f32[9]{0} slice(Arg_0.167), slice={[1:10]}
  slice.169 = f32[9]{0} slice(Arg_0.167), slice={[0:9]}
  ROOT subtract.170 = f32[9]{0} subtract(slice.168, slice.169)
}

region_18.171 {
  Arg_0.172 = f32[] parameter(0)
  Arg_1.173 = f32[] parameter(1)
  ROOT add.174 = f32[] add(Arg_0.172, Arg_1.173)
}

region_19.175 {
  Arg_0.176 = f32[] parameter(0)
  Arg_1.177 = f32[] parameter(1)
  ROOT add.178 = f32[] add(Arg_0.176, Arg_1.177)
}

region_20.179 {
  Arg_0.180 = f32[] parameter(0)
  Arg_1.181 = f32[] parameter(1)
  ROOT add.182 = f32[] add(Arg_0.180, Arg_1.181)
}

region_21.183 {
  Arg_0.184 = f32[] parameter(0)
  Arg_1.185 = f32[] parameter(1)
  ROOT add.186 = f32[] add(Arg_0.184, Arg_1.185)
}

region_22.187 {
  Arg_0.188 = f32[] parameter(0)
  Arg_1.189 = f32[] parameter(1)
  ROOT add.190 = f32[] add(Arg_0.188, Arg_1.189)
}

region_23.191 {
  Arg_0.192 = f32[] parameter(0)
  Arg_1.193 = f32[] parameter(1)
  ROOT add.194 = f32[] add(Arg_0.192, Arg_1.193)
}

_where_17.195 {
  Arg_0.196 = pred[] parameter(0)
  broadcast.199 = pred[5,6]{1,0} broadcast(Arg_0.196), dimensions={}
  Arg_1.197 = f32[5,6]{1,0} parameter(1)
  Arg_2.198 = f32[5,6]{1,0} parameter(2)
  ROOT select.200 = f32[5,6]{1,0} select(broadcast.199, Arg_1.197, Arg_2.198)
}

diff_18.201 {
  Arg_0.202 = f32[10]{0} parameter(0)
  slice.203 = f32[9]{0} slice(Arg_0.202), slice={[1:10]}
  slice.204 = f32[9]{0} slice(Arg_0.202), slice={[0:9]}
  ROOT subtract.205 = f32[9]{0} subtract(slice.203, slice.204)
}

region_24.206 {
  Arg_0.207 = f32[] parameter(0)
  Arg_1.208 = f32[] parameter(1)
  ROOT add.209 = f32[] add(Arg_0.207, Arg_1.208)
}

region_25.210 {
  Arg_0.211 = f32[] parameter(0)
  Arg_1.212 = f32[] parameter(1)
  ROOT add.213 = f32[] add(Arg_0.211, Arg_1.212)
}

region_26.214 {
  Arg_0.215 = f32[] parameter(0)
  Arg_1.216 = f32[] parameter(1)
  ROOT add.217 = f32[] add(Arg_0.215, Arg_1.216)
}

region_27.218 {
  Arg_0.219 = f32[] parameter(0)
  Arg_1.220 = f32[] parameter(1)
  ROOT add.221 = f32[] add(Arg_0.219, Arg_1.220)
}

region_28.222 {
  Arg_0.223 = f32[] parameter(0)
  Arg_1.224 = f32[] parameter(1)
  ROOT add.225 = f32[] add(Arg_0.223, Arg_1.224)
}

region_29.226 {
  Arg_0.227 = f32[] parameter(0)
  Arg_1.228 = f32[] parameter(1)
  ROOT add.229 = f32[] add(Arg_0.227, Arg_1.228)
}

_where_19.230 {
  Arg_0.231 = pred[] parameter(0)
  broadcast.234 = pred[6,5]{1,0} broadcast(Arg_0.231), dimensions={}
  Arg_1.232 = f32[6,5]{1,0} parameter(1)
  Arg_2.233 = f32[6,5]{1,0} parameter(2)
  ROOT select.235 = f32[6,5]{1,0} select(broadcast.234, Arg_1.232, Arg_2.233)
}

_where_20.236 {
  Arg_0.237 = pred[] parameter(0)
  Arg_1.238 = f32[] parameter(1)
  Arg_2.239 = f32[] parameter(2)
  ROOT select.240 = f32[] select(Arg_0.237, Arg_1.238, Arg_2.239)
}

_where_21.241 {
  Arg_0.242 = pred[5]{0} parameter(0)
  Arg_1.243 = f32[5]{0} parameter(1)
  Arg_2.244 = f32[] parameter(2)
  broadcast.245 = f32[5]{0} broadcast(Arg_2.244), dimensions={}
  ROOT select.246 = f32[5]{0} select(Arg_0.242, Arg_1.243, broadcast.245)
}

_where_22.247 {
  Arg_0.248 = pred[6]{0} parameter(0)
  Arg_1.249 = f32[6]{0} parameter(1)
  Arg_2.250 = f32[] parameter(2)
  broadcast.251 = f32[6]{0} broadcast(Arg_2.250), dimensions={}
  ROOT select.252 = f32[6]{0} select(Arg_0.248, Arg_1.249, broadcast.251)
}

_where_25.253 {
  Arg_0.254 = pred[] parameter(0)
  Arg_1.255 = f32[] parameter(1)
  Arg_2.256 = s32[] parameter(2)
  convert.257 = f32[] convert(Arg_2.256)
  ROOT select.258 = f32[] select(Arg_0.254, Arg_1.255, convert.257)
}

_where_26.259 {
  Arg_0.260 = pred[] parameter(0)
  Arg_1.261 = f32[] parameter(1)
  Arg_2.262 = f32[] parameter(2)
  ROOT select.263 = f32[] select(Arg_0.260, Arg_1.261, Arg_2.262)
}

_where_27.264 {
  Arg_0.265 = pred[] parameter(0)
  Arg_1.266 = f32[] parameter(1)
  Arg_2.267 = f32[] parameter(2)
  ROOT select.268 = f32[] select(Arg_0.265, Arg_1.266, Arg_2.267)
}

region_32.269 {
  Arg_0.270 = f32[] parameter(0)
  Arg_1.271 = f32[] parameter(1)
  ROOT maximum.272 = f32[] maximum(Arg_0.270, Arg_1.271)
}

isfinite_28.273 {
  Arg_0.274 = f32[6]{0} parameter(0)
  ROOT is-finite.275 = pred[6]{0} is-finite(Arg_0.274)
}

region_33.276 {
  Arg_0.277 = f32[] parameter(0)
  Arg_1.278 = f32[] parameter(1)
  ROOT add.279 = f32[] add(Arg_0.277, Arg_1.278)
}

isnan_29.280 {
  Arg_0.281 = f32[6]{0} parameter(0)
  ROOT compare.282 = pred[6]{0} compare(Arg_0.281, Arg_0.281), direction=NE
}

_where_30.283 {
  Arg_0.284 = pred[6]{0} parameter(0)
  Arg_1.285 = f32[6]{0} parameter(1)
  Arg_2.286 = f32[] parameter(2)
  broadcast.287 = f32[6]{0} broadcast(Arg_2.286), dimensions={}
  ROOT select.288 = f32[6]{0} select(Arg_0.284, Arg_1.285, broadcast.287)
}

_where_31.289 {
  Arg_0.290 = pred[6]{0} parameter(0)
  Arg_1.291 = f32[] parameter(1)
  broadcast.293 = f32[6]{0} broadcast(Arg_1.291), dimensions={}
  Arg_2.292 = f32[6]{0} parameter(2)
  ROOT select.294 = f32[6]{0} select(Arg_0.290, broadcast.293, Arg_2.292)
}

isfinite_32.295 {
  Arg_0.296 = f32[6]{0} parameter(0)
  ROOT is-finite.297 = pred[6]{0} is-finite(Arg_0.296)
}

_where_33.298 {
  Arg_0.299 = pred[6]{0} parameter(0)
  Arg_1.300 = f32[6]{0} parameter(1)
  Arg_2.301 = s32[] parameter(2)
  convert.302 = f32[] convert(Arg_2.301)
  broadcast.303 = f32[6]{0} broadcast(convert.302), dimensions={}
  ROOT select.304 = f32[6]{0} select(Arg_0.299, Arg_1.300, broadcast.303)
}

isfinite_34.305 {
  Arg_0.306 = f32[6]{0} parameter(0)
  ROOT is-finite.307 = pred[6]{0} is-finite(Arg_0.306)
}

_where_35.308 {
  Arg_0.309 = pred[6]{0} parameter(0)
  Arg_1.310 = f32[6]{0} parameter(1)
  Arg_2.311 = s32[] parameter(2)
  convert.312 = f32[] convert(Arg_2.311)
  broadcast.313 = f32[6]{0} broadcast(convert.312), dimensions={}
  ROOT select.314 = f32[6]{0} select(Arg_0.309, Arg_1.310, broadcast.313)
}

isfinite_36.315 {
  Arg_0.316 = f32[6]{0} parameter(0)
  ROOT is-finite.317 = pred[6]{0} is-finite(Arg_0.316)
}

_where_37.318 {
  Arg_0.319 = pred[6]{0} parameter(0)
  Arg_1.320 = f32[6]{0} parameter(1)
  Arg_2.321 = f32[] parameter(2)
  broadcast.322 = f32[6]{0} broadcast(Arg_2.321), dimensions={}
  ROOT select.323 = f32[6]{0} select(Arg_0.319, Arg_1.320, broadcast.322)
}

_where_38.324 {
  Arg_0.325 = pred[] parameter(0)
  Arg_1.326 = f32[] parameter(1)
  Arg_2.327 = f32[] parameter(2)
  ROOT select.328 = f32[] select(Arg_0.325, Arg_1.326, Arg_2.327)
}

region_34.329 {
  Arg_0.330 = f32[] parameter(0)
  Arg_1.331 = f32[] parameter(1)
  ROOT maximum.332 = f32[] maximum(Arg_0.330, Arg_1.331)
}

isfinite_39.333 {
  Arg_0.334 = f32[5]{0} parameter(0)
  ROOT is-finite.335 = pred[5]{0} is-finite(Arg_0.334)
}

region_35.336 {
  Arg_0.337 = f32[] parameter(0)
  Arg_1.338 = f32[] parameter(1)
  ROOT add.339 = f32[] add(Arg_0.337, Arg_1.338)
}

isnan_40.340 {
  Arg_0.341 = f32[5]{0} parameter(0)
  ROOT compare.342 = pred[5]{0} compare(Arg_0.341, Arg_0.341), direction=NE
}

_where_41.343 {
  Arg_0.344 = pred[5]{0} parameter(0)
  Arg_1.345 = f32[5]{0} parameter(1)
  Arg_2.346 = f32[] parameter(2)
  broadcast.347 = f32[5]{0} broadcast(Arg_2.346), dimensions={}
  ROOT select.348 = f32[5]{0} select(Arg_0.344, Arg_1.345, broadcast.347)
}

_where_42.349 {
  Arg_0.350 = pred[5]{0} parameter(0)
  Arg_1.351 = f32[] parameter(1)
  broadcast.353 = f32[5]{0} broadcast(Arg_1.351), dimensions={}
  Arg_2.352 = f32[5]{0} parameter(2)
  ROOT select.354 = f32[5]{0} select(Arg_0.350, broadcast.353, Arg_2.352)
}

isfinite_43.355 {
  Arg_0.356 = f32[5]{0} parameter(0)
  ROOT is-finite.357 = pred[5]{0} is-finite(Arg_0.356)
}

_where_44.358 {
  Arg_0.359 = pred[5]{0} parameter(0)
  Arg_1.360 = f32[5]{0} parameter(1)
  Arg_2.361 = s32[] parameter(2)
  convert.362 = f32[] convert(Arg_2.361)
  broadcast.363 = f32[5]{0} broadcast(convert.362), dimensions={}
  ROOT select.364 = f32[5]{0} select(Arg_0.359, Arg_1.360, broadcast.363)
}

isfinite_45.365 {
  Arg_0.366 = f32[5]{0} parameter(0)
  ROOT is-finite.367 = pred[5]{0} is-finite(Arg_0.366)
}

_where_46.368 {
  Arg_0.369 = pred[5]{0} parameter(0)
  Arg_1.370 = f32[5]{0} parameter(1)
  Arg_2.371 = s32[] parameter(2)
  convert.372 = f32[] convert(Arg_2.371)
  broadcast.373 = f32[5]{0} broadcast(convert.372), dimensions={}
  ROOT select.374 = f32[5]{0} select(Arg_0.369, Arg_1.370, broadcast.373)
}

isfinite_47.375 {
  Arg_0.376 = f32[5]{0} parameter(0)
  ROOT is-finite.377 = pred[5]{0} is-finite(Arg_0.376)
}

_where_48.378 {
  Arg_0.379 = pred[5]{0} parameter(0)
  Arg_1.380 = f32[5]{0} parameter(1)
  Arg_2.381 = f32[] parameter(2)
  broadcast.382 = f32[5]{0} broadcast(Arg_2.381), dimensions={}
  ROOT select.383 = f32[5]{0} select(Arg_0.379, Arg_1.380, broadcast.382)
}

region_36.384 {
  Arg_0.385 = f32[] parameter(0)
  Arg_1.386 = f32[] parameter(1)
  ROOT maximum.387 = f32[] maximum(Arg_0.385, Arg_1.386)
}

isfinite_49.388 {
  Arg_0.389 = f32[6]{0} parameter(0)
  ROOT is-finite.390 = pred[6]{0} is-finite(Arg_0.389)
}

region_37.391 {
  Arg_0.392 = f32[] parameter(0)
  Arg_1.393 = f32[] parameter(1)
  ROOT add.394 = f32[] add(Arg_0.392, Arg_1.393)
}

isnan_50.395 {
  Arg_0.396 = f32[6]{0} parameter(0)
  ROOT compare.397 = pred[6]{0} compare(Arg_0.396, Arg_0.396), direction=NE
}

_where_51.398 {
  Arg_0.399 = pred[6]{0} parameter(0)
  Arg_1.400 = f32[6]{0} parameter(1)
  Arg_2.401 = f32[] parameter(2)
  broadcast.402 = f32[6]{0} broadcast(Arg_2.401), dimensions={}
  ROOT select.403 = f32[6]{0} select(Arg_0.399, Arg_1.400, broadcast.402)
}

_where_52.404 {
  Arg_0.405 = pred[6]{0} parameter(0)
  Arg_1.406 = f32[] parameter(1)
  broadcast.408 = f32[6]{0} broadcast(Arg_1.406), dimensions={}
  Arg_2.407 = f32[6]{0} parameter(2)
  ROOT select.409 = f32[6]{0} select(Arg_0.405, broadcast.408, Arg_2.407)
}

isfinite_53.410 {
  Arg_0.411 = f32[6]{0} parameter(0)
  ROOT is-finite.412 = pred[6]{0} is-finite(Arg_0.411)
}

_where_54.413 {
  Arg_0.414 = pred[6]{0} parameter(0)
  Arg_1.415 = f32[6]{0} parameter(1)
  Arg_2.416 = s32[] parameter(2)
  convert.417 = f32[] convert(Arg_2.416)
  broadcast.418 = f32[6]{0} broadcast(convert.417), dimensions={}
  ROOT select.419 = f32[6]{0} select(Arg_0.414, Arg_1.415, broadcast.418)
}

region_38.420 {
  Arg_0.421 = f32[] parameter(0)
  Arg_1.422 = f32[] parameter(1)
  ROOT add.423 = f32[] add(Arg_0.421, Arg_1.422)
}

_where_55.424 {
  Arg_0.425 = pred[] parameter(0)
  reshape.428 = pred[1]{0} reshape(Arg_0.425)
  Arg_1.426 = f32[1]{0} parameter(1)
  Arg_2.427 = f32[] parameter(2)
  reshape.429 = f32[1]{0} reshape(Arg_2.427)
  ROOT select.430 = f32[1]{0} select(reshape.428, Arg_1.426, reshape.429)
}

_where_57.431 {
  Arg_0.432 = pred[] parameter(0)
  Arg_1.433 = s32[] parameter(1)
  Arg_2.434 = s32[] parameter(2)
  ROOT select.435 = s32[] select(Arg_0.432, Arg_1.433, Arg_2.434)
}

floor_divide_56.436 {
  Arg_0.437 = s32[] parameter(0)
  sign.442 = s32[] sign(Arg_0.437)
  Arg_1.438 = s32[] parameter(1)
  sign.443 = s32[] sign(Arg_1.438)
  compare.444 = pred[] compare(sign.442, sign.443), direction=NE
  remainder.445 = s32[] remainder(Arg_0.437, Arg_1.438)
  constant.440 = s32[] constant(0)
  compare.446 = pred[] compare(remainder.445, constant.440), direction=NE
  and.447 = pred[] and(compare.444, compare.446)
  divide.441 = s32[] divide(Arg_0.437, Arg_1.438)
  constant.439 = s32[] constant(1)
  subtract.448 = s32[] subtract(divide.441, constant.439)
  ROOT call.449 = s32[] call(and.447, subtract.448, divide.441), to_apply=_where_57.431
}

region_39.450 {
  Arg_0.451 = f32[] parameter(0)
  ROOT Arg_1.452 = f32[] parameter(1)
}

region_31.453 {
  arg_tuple.454 = (s32[], s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, /*index=5*/pred[10]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) parameter(0)
  get-tuple-element.458 = f32[5]{0} get-tuple-element(arg_tuple.454), index=3
  reshape.517 = f32[5,1]{1,0} reshape(get-tuple-element.458)
  broadcast.519 = f32[5,1]{1,0} broadcast(reshape.517), dimensions={0,1}
  reshape.520 = f32[5]{0} reshape(broadcast.519)
  broadcast.521 = f32[5,6]{1,0} broadcast(reshape.520), dimensions={0}
  get-tuple-element.459 = f32[6]{0} get-tuple-element(arg_tuple.454), index=4
  reshape.518 = f32[1,6]{1,0} reshape(get-tuple-element.459)
  broadcast.522 = f32[1,6]{1,0} broadcast(reshape.518), dimensions={0,1}
  reshape.523 = f32[6]{0} reshape(broadcast.522)
  broadcast.524 = f32[5,6]{1,0} broadcast(reshape.523), dimensions={1}
  add.525 = f32[5,6]{1,0} add(broadcast.521, broadcast.524)
  get-tuple-element.462 = f32[5,6]{1,0} get-tuple-element(arg_tuple.454), index=7
  subtract.526 = f32[5,6]{1,0} subtract(add.525, get-tuple-element.462)
  constant.482 = pred[] constant(false)
  constant.484 = f32[] constant(1)
  call.512 = f32[] call(constant.482, constant.484, constant.484), to_apply=_where_27.264
  get-tuple-element.456 = s32[] get-tuple-element(arg_tuple.454), index=1
  convert.513 = f32[] convert(get-tuple-element.456)
  power.514 = f32[] power(call.512, convert.513)
  maximum.515 = f32[] maximum(power.514, constant.484)
  constant.485 = f32[] constant(0.1)
  multiply.516 = f32[] multiply(maximum.515, constant.485)
  broadcast.527 = f32[5,6]{1,0} broadcast(multiply.516), dimensions={}
  divide.528 = f32[5,6]{1,0} divide(subtract.526, broadcast.527)
  constant.481 = f32[] constant(-inf)
  reduce.529 = f32[6]{0} reduce(divide.528, constant.481), dimensions={0}, to_apply=region_32.269
  call.530 = pred[6]{0} call(reduce.529), to_apply=isfinite_28.273
  constant.479 = f32[] constant(0)
  broadcast.480 = f32[6]{0} broadcast(constant.479), dimensions={}
  select.531 = f32[6]{0} select(call.530, reduce.529, broadcast.480)
  reshape.532 = f32[1,6]{1,0} reshape(select.531)
  broadcast.533 = f32[1,6]{1,0} broadcast(reshape.532), dimensions={0,1}
  reshape.534 = f32[6]{0} reshape(broadcast.533)
  broadcast.535 = f32[5,6]{1,0} broadcast(reshape.534), dimensions={1}
  subtract.536 = f32[5,6]{1,0} subtract(divide.528, broadcast.535)
  exponential.537 = f32[5,6]{1,0} exponential(subtract.536)
  constant.478 = f32[] constant(0)
  reduce.538 = f32[6]{0} reduce(exponential.537, constant.478), dimensions={0}, to_apply=region_33.276
  log.539 = f32[6]{0} log(reduce.538)
  add.540 = f32[6]{0} add(log.539, select.531)
  constant.476 = f32[] constant(-inf)
  broadcast.477 = f32[6]{0} broadcast(constant.476), dimensions={}
  compare.543 = pred[6]{0} compare(add.540, broadcast.477), direction=EQ
  call.541 = pred[6]{0} call(add.540), to_apply=isnan_29.280
  call.542 = f32[6]{0} call(call.541, add.540, constant.484), to_apply=_where_30.283
  call.544 = f32[6]{0} call(compare.543, constant.478, call.542), to_apply=_where_31.289
  reshape.569 = f32[5,1]{1,0} reshape(get-tuple-element.458)
  broadcast.571 = f32[5,1]{1,0} broadcast(reshape.569), dimensions={0,1}
  reshape.572 = f32[5]{0} reshape(broadcast.571)
  broadcast.573 = f32[5,6]{1,0} broadcast(reshape.572), dimensions={0}
  convert.497 = f32[] convert(get-tuple-element.456)
  constant.488 = pred[] constant(true)
  constant.487 = f32[] constant(inf)
  constant.490 = s32[] constant(0)
  call.496 = f32[] call(constant.488, constant.487, constant.490), to_apply=_where_25.253
  compare.498 = pred[] compare(convert.497, call.496), direction=GE
  constant.483 = f32[] constant(2)
  get-tuple-element.457 = f32[200,1]{1,0} get-tuple-element(arg_tuple.454), index=2
  slice.499 = f32[1,1]{1,0} slice(get-tuple-element.457), slice={[199:200], [0:1]}
  reshape.500 = f32[] reshape(slice.499)
  slice.501 = f32[1,1]{1,0} slice(get-tuple-element.457), slice={[198:199], [0:1]}
  reshape.502 = f32[] reshape(slice.501)
  divide.503 = f32[] divide(reshape.500, reshape.502)
  constant.486 = f32[] constant(0.99)
  minimum.504 = f32[] minimum(divide.503, constant.486)
  power.505 = f32[] power(minimum.504, constant.485)
  subtract.506 = f32[] subtract(constant.484, power.505)
  sqrt.507 = f32[] sqrt(subtract.506)
  add.508 = f32[] add(sqrt.507, constant.484)
  divide.509 = f32[] divide(constant.483, add.508)
  call.510 = f32[] call(compare.498, divide.509, constant.484), to_apply=_where_26.259
  subtract.557 = f32[] subtract(constant.484, call.510)
  broadcast.558 = f32[6]{0} broadcast(subtract.557), dimensions={}
  call.555 = pred[6]{0} call(get-tuple-element.459), to_apply=isfinite_36.315
  call.556 = f32[6]{0} call(call.555, get-tuple-element.459, constant.478), to_apply=_where_37.318
  multiply.559 = f32[6]{0} multiply(broadcast.558, call.556)
  broadcast.560 = f32[6]{0} broadcast(call.510), dimensions={}
  broadcast.550 = f32[6]{0} broadcast(multiply.516), dimensions={}
  get-tuple-element.461 = f32[6]{0} get-tuple-element(arg_tuple.454), index=6
  log.511 = f32[6]{0} log(get-tuple-element.461)
  multiply.551 = f32[6]{0} multiply(broadcast.550, log.511)
  broadcast.545 = f32[6]{0} broadcast(multiply.516), dimensions={}
  multiply.546 = f32[6]{0} multiply(broadcast.545, add.540)
  call.547 = pred[6]{0} call(get-tuple-element.459), to_apply=isfinite_32.295
  call.548 = f32[6]{0} call(call.547, get-tuple-element.459, constant.490), to_apply=_where_33.298
  subtract.549 = f32[6]{0} subtract(multiply.546, call.548)
  call.552 = pred[6]{0} call(subtract.549), to_apply=isfinite_34.305
  call.553 = f32[6]{0} call(call.552, subtract.549, constant.490), to_apply=_where_35.308
  subtract.554 = f32[6]{0} subtract(multiply.551, call.553)
  multiply.561 = f32[6]{0} multiply(broadcast.560, subtract.554)
  add.562 = f32[6]{0} add(multiply.559, multiply.561)
  reshape.570 = f32[1,6]{1,0} reshape(add.562)
  broadcast.574 = f32[1,6]{1,0} broadcast(reshape.570), dimensions={0,1}
  reshape.575 = f32[6]{0} reshape(broadcast.574)
  broadcast.576 = f32[5,6]{1,0} broadcast(reshape.575), dimensions={1}
  add.577 = f32[5,6]{1,0} add(broadcast.573, broadcast.576)
  subtract.578 = f32[5,6]{1,0} subtract(add.577, get-tuple-element.462)
  call.564 = f32[] call(constant.482, constant.484, constant.484), to_apply=_where_38.324
  convert.565 = f32[] convert(get-tuple-element.456)
  power.566 = f32[] power(call.564, convert.565)
  maximum.567 = f32[] maximum(power.566, constant.484)
  multiply.568 = f32[] multiply(maximum.567, constant.485)
  broadcast.579 = f32[5,6]{1,0} broadcast(multiply.568), dimensions={}
  divide.580 = f32[5,6]{1,0} divide(subtract.578, broadcast.579)
  reduce.581 = f32[5]{0} reduce(divide.580, constant.481), dimensions={1}, to_apply=region_34.329
  call.582 = pred[5]{0} call(reduce.581), to_apply=isfinite_39.333
  constant.474 = f32[] constant(0)
  broadcast.475 = f32[5]{0} broadcast(constant.474), dimensions={}
  select.583 = f32[5]{0} select(call.582, reduce.581, broadcast.475)
  reshape.584 = f32[5,1]{1,0} reshape(select.583)
  broadcast.585 = f32[5,1]{1,0} broadcast(reshape.584), dimensions={0,1}
  reshape.586 = f32[5]{0} reshape(broadcast.585)
  broadcast.587 = f32[5,6]{1,0} broadcast(reshape.586), dimensions={0}
  subtract.588 = f32[5,6]{1,0} subtract(divide.580, broadcast.587)
  exponential.589 = f32[5,6]{1,0} exponential(subtract.588)
  reduce.590 = f32[5]{0} reduce(exponential.589, constant.478), dimensions={1}, to_apply=region_35.336
  log.591 = f32[5]{0} log(reduce.590)
  add.592 = f32[5]{0} add(log.591, select.583)
  constant.472 = f32[] constant(-inf)
  broadcast.473 = f32[5]{0} broadcast(constant.472), dimensions={}
  compare.595 = pred[5]{0} compare(add.592, broadcast.473), direction=EQ
  call.593 = pred[5]{0} call(add.592), to_apply=isnan_40.340
  call.594 = f32[5]{0} call(call.593, add.592, constant.484), to_apply=_where_41.343
  call.596 = f32[5]{0} call(compare.595, constant.478, call.594), to_apply=_where_42.349
  subtract.609 = f32[] subtract(constant.484, call.510)
  broadcast.610 = f32[5]{0} broadcast(subtract.609), dimensions={}
  call.607 = pred[5]{0} call(get-tuple-element.458), to_apply=isfinite_47.375
  call.608 = f32[5]{0} call(call.607, get-tuple-element.458, constant.478), to_apply=_where_48.378
  multiply.611 = f32[5]{0} multiply(broadcast.610, call.608)
  broadcast.612 = f32[5]{0} broadcast(call.510), dimensions={}
  broadcast.602 = f32[5]{0} broadcast(multiply.568), dimensions={}
  get-tuple-element.463 = f32[5]{0} get-tuple-element(arg_tuple.454), index=8
  log.563 = f32[5]{0} log(get-tuple-element.463)
  multiply.603 = f32[5]{0} multiply(broadcast.602, log.563)
  broadcast.597 = f32[5]{0} broadcast(multiply.568), dimensions={}
  multiply.598 = f32[5]{0} multiply(broadcast.597, add.592)
  call.599 = pred[5]{0} call(get-tuple-element.458), to_apply=isfinite_43.355
  call.600 = f32[5]{0} call(call.599, get-tuple-element.458, constant.490), to_apply=_where_44.358
  subtract.601 = f32[5]{0} subtract(multiply.598, call.600)
  call.604 = pred[5]{0} call(subtract.601), to_apply=isfinite_45.365
  call.605 = f32[5]{0} call(call.604, subtract.601, constant.490), to_apply=_where_46.368
  subtract.606 = f32[5]{0} subtract(multiply.603, call.605)
  multiply.613 = f32[5]{0} multiply(broadcast.612, subtract.606)
  add.614 = f32[5]{0} add(multiply.611, multiply.613)
  reshape.617 = f32[5,1]{1,0} reshape(add.614)
  broadcast.619 = f32[5,1]{1,0} broadcast(reshape.617), dimensions={0,1}
  reshape.620 = f32[5]{0} reshape(broadcast.619)
  broadcast.621 = f32[5,6]{1,0} broadcast(reshape.620), dimensions={0}
  reshape.618 = f32[1,6]{1,0} reshape(add.562)
  broadcast.622 = f32[1,6]{1,0} broadcast(reshape.618), dimensions={0,1}
  reshape.623 = f32[6]{0} reshape(broadcast.622)
  broadcast.624 = f32[5,6]{1,0} broadcast(reshape.623), dimensions={1}
  add.625 = f32[5,6]{1,0} add(broadcast.621, broadcast.624)
  subtract.626 = f32[5,6]{1,0} subtract(add.625, get-tuple-element.462)
  constant.470 = f32[] constant(0.1)
  broadcast.471 = f32[5,6]{1,0} broadcast(constant.470), dimensions={}
  divide.627 = f32[5,6]{1,0} divide(subtract.626, broadcast.471)
  reduce.628 = f32[6]{0} reduce(divide.627, constant.481), dimensions={0}, to_apply=region_36.384
  call.629 = pred[6]{0} call(reduce.628), to_apply=isfinite_49.388
  select.630 = f32[6]{0} select(call.629, reduce.628, broadcast.480)
  reshape.631 = f32[1,6]{1,0} reshape(select.630)
  broadcast.632 = f32[1,6]{1,0} broadcast(reshape.631), dimensions={0,1}
  reshape.633 = f32[6]{0} reshape(broadcast.632)
  broadcast.634 = f32[5,6]{1,0} broadcast(reshape.633), dimensions={1}
  subtract.635 = f32[5,6]{1,0} subtract(divide.627, broadcast.634)
  exponential.636 = f32[5,6]{1,0} exponential(subtract.635)
  reduce.637 = f32[6]{0} reduce(exponential.636, constant.478), dimensions={0}, to_apply=region_37.391
  log.638 = f32[6]{0} log(reduce.637)
  add.639 = f32[6]{0} add(log.638, select.630)
  compare.642 = pred[6]{0} compare(add.639, broadcast.477), direction=EQ
  call.640 = pred[6]{0} call(add.639), to_apply=isnan_50.395
  call.641 = f32[6]{0} call(call.640, add.639, constant.484), to_apply=_where_51.398
  call.643 = f32[6]{0} call(compare.642, constant.478, call.641), to_apply=_where_52.404
  get-tuple-element.455 = s32[] get-tuple-element(arg_tuple.454), index=0
  constant.465 = s32[] constant(1)
  add.672 = s32[] add(get-tuple-element.455, constant.465)
  add.671 = s32[] add(get-tuple-element.456, constant.465)
  constant.489 = s32[] constant(10)
  call.665 = s32[] call(get-tuple-element.456, constant.489), to_apply=floor_divide_56.436
  compare.666 = pred[] compare(call.665, constant.490), direction=LT
  constant.466 = s32[] constant(200)
  add.667 = s32[] add(call.665, constant.466)
  select.668 = s32[] select(compare.666, add.667, call.665)
  reshape.669 = s32[1]{0} reshape(select.668)
  get-tuple-element.460 = pred[10]{0} get-tuple-element(arg_tuple.454), index=5
  compare.491 = pred[] compare(get-tuple-element.455, constant.490), direction=LT
  add.492 = s32[] add(get-tuple-element.455, constant.489)
  select.493 = s32[] select(compare.491, add.492, get-tuple-element.455)
  dynamic-slice.494 = pred[1]{0} dynamic-slice(get-tuple-element.460, select.493), dynamic_slice_sizes={1}
  reshape.495 = pred[] reshape(dynamic-slice.494)
  compare.615 = pred[] compare(get-tuple-element.456, constant.490), direction=GE
  and.616 = pred[] and(reshape.495, compare.615)
  constant.468 = f32[] constant(0.1)
  broadcast.469 = f32[6]{0} broadcast(constant.468), dimensions={}
  multiply.644 = f32[6]{0} multiply(add.639, broadcast.469)
  call.645 = pred[6]{0} call(add.562), to_apply=isfinite_53.410
  call.646 = f32[6]{0} call(call.645, add.562, constant.490), to_apply=_where_54.413
  subtract.647 = f32[6]{0} subtract(multiply.644, call.646)
  add.648 = f32[6]{0} add(subtract.647, add.562)
  divide.649 = f32[6]{0} divide(add.648, broadcast.469)
  exponential.650 = f32[6]{0} exponential(divide.649)
  subtract.651 = f32[6]{0} subtract(exponential.650, get-tuple-element.461)
  abs.652 = f32[6]{0} abs(subtract.651)
  reshape.655 = f32[1,6]{1,0} reshape(abs.652)
  get-tuple-element.464 = s32[1]{0} get-tuple-element(arg_tuple.454), index=9
  reshape.653 = s32[1,1]{1,0} reshape(get-tuple-element.464)
  convert.654 = f32[1,1]{1,0} convert(reshape.653)
  broadcast.656 = f32[1,1]{1,0} broadcast(convert.654), dimensions={0,1}
  reshape.657 = f32[1]{0} reshape(broadcast.656)
  broadcast.658 = f32[1,6]{1,0} broadcast(reshape.657), dimensions={0}
  power.659 = f32[1,6]{1,0} power(reshape.655, broadcast.658)
  reduce.660 = f32[1]{0} reduce(power.659, constant.478), dimensions={1}, to_apply=region_38.420
  constant.467 = f32[1]{0} constant({1})
  convert.661 = f32[1]{0} convert(get-tuple-element.464)
  divide.662 = f32[1]{0} divide(constant.467, convert.661)
  power.663 = f32[1]{0} power(reduce.660, divide.662)
  call.664 = f32[1]{0} call(and.616, power.663, constant.487), to_apply=_where_55.424
  scatter.670 = f32[200,1]{1,0} scatter(get-tuple-element.457, reshape.669, call.664), update_window_dims={0}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_39.450
  ROOT tuple.673 = (s32[], s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, /*index=5*/pred[10]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) tuple(add.672, add.671, scatter.670, add.614, add.562, /*index=5*/get-tuple-element.460, get-tuple-element.461, get-tuple-element.462, get-tuple-element.463, get-tuple-element.464)
}

region_40.674 {
  arg_tuple.675 = (s32[], s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, /*index=5*/pred[10]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) parameter(0)
  get-tuple-element.677 = s32[] get-tuple-element(arg_tuple.675), index=1
  get-tuple-element.678 = f32[200,1]{1,0} get-tuple-element(arg_tuple.675), index=2
  get-tuple-element.679 = f32[5]{0} get-tuple-element(arg_tuple.675), index=3
  get-tuple-element.680 = f32[6]{0} get-tuple-element(arg_tuple.675), index=4
  get-tuple-element.681 = pred[10]{0} get-tuple-element(arg_tuple.675), index=5
  get-tuple-element.682 = f32[6]{0} get-tuple-element(arg_tuple.675), index=6
  get-tuple-element.683 = f32[5,6]{1,0} get-tuple-element(arg_tuple.675), index=7
  get-tuple-element.684 = f32[5]{0} get-tuple-element(arg_tuple.675), index=8
  get-tuple-element.685 = s32[1]{0} get-tuple-element(arg_tuple.675), index=9
  get-tuple-element.676 = s32[] get-tuple-element(arg_tuple.675), index=0
  constant.686 = s32[] constant(10)
  ROOT compare.687 = pred[] compare(get-tuple-element.676, constant.686), direction=LT
}

region_30.688 {
  constant.699 = s32[] constant(0)
  arg_tuple.689 = (s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, pred[10]{0}, /*index=5*/f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) parameter(0)
  get-tuple-element.690 = s32[] get-tuple-element(arg_tuple.689), index=0
  get-tuple-element.691 = f32[200,1]{1,0} get-tuple-element(arg_tuple.689), index=1
  get-tuple-element.692 = f32[5]{0} get-tuple-element(arg_tuple.689), index=2
  get-tuple-element.693 = f32[6]{0} get-tuple-element(arg_tuple.689), index=3
  get-tuple-element.694 = pred[10]{0} get-tuple-element(arg_tuple.689), index=4
  get-tuple-element.695 = f32[6]{0} get-tuple-element(arg_tuple.689), index=5
  get-tuple-element.696 = f32[5,6]{1,0} get-tuple-element(arg_tuple.689), index=6
  get-tuple-element.697 = f32[5]{0} get-tuple-element(arg_tuple.689), index=7
  get-tuple-element.698 = s32[1]{0} get-tuple-element(arg_tuple.689), index=8
  tuple.700 = (s32[], s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, /*index=5*/pred[10]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) tuple(constant.699, get-tuple-element.690, get-tuple-element.691, get-tuple-element.692, get-tuple-element.693, /*index=5*/get-tuple-element.694, get-tuple-element.695, get-tuple-element.696, get-tuple-element.697, get-tuple-element.698)
  while.701 = (s32[], s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, /*index=5*/pred[10]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) while(tuple.700), condition=region_40.674, body=region_31.453
  get-tuple-element.702 = s32[] get-tuple-element(while.701), index=0
  get-tuple-element.707 = pred[10]{0} get-tuple-element(while.701), index=5
  get-tuple-element.708 = f32[6]{0} get-tuple-element(while.701), index=6
  get-tuple-element.709 = f32[5,6]{1,0} get-tuple-element(while.701), index=7
  get-tuple-element.710 = f32[5]{0} get-tuple-element(while.701), index=8
  get-tuple-element.711 = s32[1]{0} get-tuple-element(while.701), index=9
  get-tuple-element.703 = s32[] get-tuple-element(while.701), index=1
  get-tuple-element.704 = f32[200,1]{1,0} get-tuple-element(while.701), index=2
  get-tuple-element.705 = f32[5]{0} get-tuple-element(while.701), index=3
  get-tuple-element.706 = f32[6]{0} get-tuple-element(while.701), index=4
  ROOT tuple.712 = (s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, pred[10]{0}, /*index=5*/f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) tuple(get-tuple-element.703, get-tuple-element.704, get-tuple-element.705, get-tuple-element.706, get-tuple-element.694, /*index=5*/get-tuple-element.695, get-tuple-element.696, get-tuple-element.697, get-tuple-element.698)
}

_where_23.713 {
  Arg_0.714 = pred[] parameter(0)
  Arg_1.715 = s32[] parameter(1)
  Arg_2.716 = s32[] parameter(2)
  ROOT select.717 = s32[] select(Arg_0.714, Arg_1.715, Arg_2.716)
}

floor_divide.718 {
  Arg_0.719 = s32[] parameter(0)
  sign.724 = s32[] sign(Arg_0.719)
  Arg_1.720 = s32[] parameter(1)
  sign.725 = s32[] sign(Arg_1.720)
  compare.726 = pred[] compare(sign.724, sign.725), direction=NE
  remainder.727 = s32[] remainder(Arg_0.719, Arg_1.720)
  constant.722 = s32[] constant(0)
  compare.728 = pred[] compare(remainder.727, constant.722), direction=NE
  and.729 = pred[] and(compare.726, compare.728)
  divide.723 = s32[] divide(Arg_0.719, Arg_1.720)
  constant.721 = s32[] constant(1)
  subtract.730 = s32[] subtract(divide.723, constant.721)
  ROOT call.731 = s32[] call(and.729, subtract.730, divide.723), to_apply=_where_23.713
}

isfinite_24.732 {
  Arg_0.733 = f32[] parameter(0)
  ROOT is-finite.734 = pred[] is-finite(Arg_0.733)
}

region_41.735 {
  arg_tuple.736 = (s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, pred[10]{0}, /*index=5*/f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) parameter(0)
  get-tuple-element.739 = f32[5]{0} get-tuple-element(arg_tuple.736), index=2
  get-tuple-element.740 = f32[6]{0} get-tuple-element(arg_tuple.736), index=3
  get-tuple-element.741 = pred[10]{0} get-tuple-element(arg_tuple.736), index=4
  get-tuple-element.742 = f32[6]{0} get-tuple-element(arg_tuple.736), index=5
  get-tuple-element.743 = f32[5,6]{1,0} get-tuple-element(arg_tuple.736), index=6
  get-tuple-element.744 = f32[5]{0} get-tuple-element(arg_tuple.736), index=7
  get-tuple-element.745 = s32[1]{0} get-tuple-element(arg_tuple.736), index=8
  get-tuple-element.737 = s32[] get-tuple-element(arg_tuple.736), index=0
  constant.752 = s32[] constant(2000)
  compare.753 = pred[] compare(get-tuple-element.737, constant.752), direction=LT
  constant.751 = s32[] constant(0)
  compare.754 = pred[] compare(get-tuple-element.737, constant.751), direction=LT
  compare.763 = pred[] compare(get-tuple-element.737, constant.751), direction=EQ
  get-tuple-element.738 = f32[200,1]{1,0} get-tuple-element(arg_tuple.736), index=1
  constant.750 = s32[] constant(10)
  call.755 = s32[] call(get-tuple-element.737, constant.750), to_apply=floor_divide.718
  constant.749 = s32[] constant(1)
  subtract.756 = s32[] subtract(call.755, constant.749)
  compare.757 = pred[] compare(subtract.756, constant.751), direction=LT
  constant.748 = s32[] constant(200)
  add.758 = s32[] add(subtract.756, constant.748)
  select.759 = s32[] select(compare.757, add.758, subtract.756)
  reshape.760 = s32[1]{0} reshape(select.759)
  constant.747 = s32[1]{0} constant({0})
  concatenate.761 = s32[2]{0} concatenate(reshape.760, constant.747), dimensions={0}
  gather.762 = f32[] gather(get-tuple-element.738, concatenate.761), offset_dims={}, collapsed_slice_dims={0,1}, start_index_map={0,1}, index_vector_dim=0, slice_sizes={1,1}, indices_are_sorted=true
  call.764 = pred[] call(gather.762), to_apply=isfinite_24.732
  not.765 = pred[] not(call.764)
  constant.746 = f32[] constant(0.001)
  compare.766 = pred[] compare(gather.762, constant.746), direction=GT
  or.767 = pred[] or(not.765, compare.766)
  or.768 = pred[] or(compare.763, or.767)
  or.769 = pred[] or(compare.754, or.768)
  ROOT and.770 = pred[] and(compare.753, or.769)
}

_where_58.771 {
  Arg_0.772 = pred[5]{0} parameter(0)
  Arg_1.773 = f32[5]{0} parameter(1)
  Arg_2.774 = f32[] parameter(2)
  broadcast.775 = f32[5]{0} broadcast(Arg_2.774), dimensions={}
  ROOT select.776 = f32[5]{0} select(Arg_0.772, Arg_1.773, broadcast.775)
}

region_42.777 {
  Arg_0.778 = f32[] parameter(0)
  Arg_1.779 = f32[] parameter(1)
  ROOT add.780 = f32[] add(Arg_0.778, Arg_1.779)
}

_where_59.781 {
  Arg_0.782 = pred[6]{0} parameter(0)
  Arg_1.783 = f32[6]{0} parameter(1)
  Arg_2.784 = f32[] parameter(2)
  broadcast.785 = f32[6]{0} broadcast(Arg_2.784), dimensions={}
  ROOT select.786 = f32[6]{0} select(Arg_0.782, Arg_1.783, broadcast.785)
}

region_43.787 {
  Arg_0.788 = f32[] parameter(0)
  Arg_1.789 = f32[] parameter(1)
  ROOT add.790 = f32[] add(Arg_0.788, Arg_1.789)
}

region_44.791 {
  Arg_0.792 = f32[] parameter(0)
  Arg_1.793 = f32[] parameter(1)
  ROOT maximum.794 = f32[] maximum(Arg_0.792, Arg_1.793)
}

isfinite_60.795 {
  Arg_0.796 = f32[6]{0} parameter(0)
  ROOT is-finite.797 = pred[6]{0} is-finite(Arg_0.796)
}

region_45.798 {
  Arg_0.799 = f32[] parameter(0)
  Arg_1.800 = f32[] parameter(1)
  ROOT add.801 = f32[] add(Arg_0.799, Arg_1.800)
}

isnan_61.802 {
  Arg_0.803 = f32[6]{0} parameter(0)
  ROOT compare.804 = pred[6]{0} compare(Arg_0.803, Arg_0.803), direction=NE
}

_where_62.805 {
  Arg_0.806 = pred[6]{0} parameter(0)
  Arg_1.807 = f32[6]{0} parameter(1)
  Arg_2.808 = f32[] parameter(2)
  broadcast.809 = f32[6]{0} broadcast(Arg_2.808), dimensions={}
  ROOT select.810 = f32[6]{0} select(Arg_0.806, Arg_1.807, broadcast.809)
}

_where_63.811 {
  Arg_0.812 = pred[6]{0} parameter(0)
  Arg_1.813 = f32[] parameter(1)
  broadcast.815 = f32[6]{0} broadcast(Arg_1.813), dimensions={}
  Arg_2.814 = f32[6]{0} parameter(2)
  ROOT select.816 = f32[6]{0} select(Arg_0.812, broadcast.815, Arg_2.814)
}

isfinite_64.817 {
  Arg_0.818 = f32[6]{0} parameter(0)
  ROOT is-finite.819 = pred[6]{0} is-finite(Arg_0.818)
}

_where_65.820 {
  Arg_0.821 = pred[6]{0} parameter(0)
  Arg_1.822 = f32[6]{0} parameter(1)
  Arg_2.823 = s32[] parameter(2)
  convert.824 = f32[] convert(Arg_2.823)
  broadcast.825 = f32[6]{0} broadcast(convert.824), dimensions={}
  ROOT select.826 = f32[6]{0} select(Arg_0.821, Arg_1.822, broadcast.825)
}

region_46.827 {
  Arg_0.828 = f32[] parameter(0)
  Arg_1.829 = f32[] parameter(1)
  ROOT add.830 = f32[] add(Arg_0.828, Arg_1.829)
}

region_47.831 {
  Arg_0.832 = f32[] parameter(0)
  Arg_1.833 = f32[] parameter(1)
  ROOT add.834 = f32[] add(Arg_0.832, Arg_1.833)
}

region_48.835 {
  Arg_0.836 = f32[] parameter(0)
  Arg_1.837 = f32[] parameter(1)
  ROOT add.838 = f32[] add(Arg_0.836, Arg_1.837)
}

region_49.839 {
  Arg_0.840 = f32[] parameter(0)
  Arg_1.841 = f32[] parameter(1)
  ROOT maximum.842 = f32[] maximum(Arg_0.840, Arg_1.841)
}

isfinite_66.843 {
  Arg_0.844 = f32[6]{0} parameter(0)
  ROOT is-finite.845 = pred[6]{0} is-finite(Arg_0.844)
}

region_50.846 {
  Arg_0.847 = f32[] parameter(0)
  Arg_1.848 = f32[] parameter(1)
  ROOT add.849 = f32[] add(Arg_0.847, Arg_1.848)
}

isnan_67.850 {
  Arg_0.851 = f32[6]{0} parameter(0)
  ROOT compare.852 = pred[6]{0} compare(Arg_0.851, Arg_0.851), direction=NE
}

_where_68.853 {
  Arg_0.854 = pred[6]{0} parameter(0)
  Arg_1.855 = f32[6]{0} parameter(1)
  Arg_2.856 = f32[] parameter(2)
  broadcast.857 = f32[6]{0} broadcast(Arg_2.856), dimensions={}
  ROOT select.858 = f32[6]{0} select(Arg_0.854, Arg_1.855, broadcast.857)
}

_where_69.859 {
  Arg_0.860 = pred[6]{0} parameter(0)
  Arg_1.861 = f32[] parameter(1)
  broadcast.863 = f32[6]{0} broadcast(Arg_1.861), dimensions={}
  Arg_2.862 = f32[6]{0} parameter(2)
  ROOT select.864 = f32[6]{0} select(Arg_0.860, broadcast.863, Arg_2.862)
}

isfinite_70.865 {
  Arg_0.866 = f32[6]{0} parameter(0)
  ROOT is-finite.867 = pred[6]{0} is-finite(Arg_0.866)
}

_where_71.868 {
  Arg_0.869 = pred[6]{0} parameter(0)
  Arg_1.870 = f32[6]{0} parameter(1)
  Arg_2.871 = s32[] parameter(2)
  convert.872 = f32[] convert(Arg_2.871)
  broadcast.873 = f32[6]{0} broadcast(convert.872), dimensions={}
  ROOT select.874 = f32[6]{0} select(Arg_0.869, Arg_1.870, broadcast.873)
}

region_51.875 {
  Arg_0.876 = f32[] parameter(0)
  Arg_1.877 = f32[] parameter(1)
  ROOT add.878 = f32[] add(Arg_0.876, Arg_1.877)
}

region_52.879 {
  Arg_0.880 = f32[] parameter(0)
  ROOT Arg_1.881 = f32[] parameter(1)
}

region_53.882 {
  Arg_0.883 = s32[] parameter(0)
  Arg_1.884 = s32[] parameter(1)
  ROOT add.885 = s32[] add(Arg_0.883, Arg_1.884)
}

isnan_72.886 {
  Arg_0.887 = f32[200]{0} parameter(0)
  ROOT compare.888 = pred[200]{0} compare(Arg_0.887, Arg_0.887), direction=NE
}

region_54.889 {
  Arg_0.890 = s32[] parameter(0)
  Arg_1.891 = s32[] parameter(1)
  ROOT add.892 = s32[] add(Arg_0.890, Arg_1.891)
}

region_55.893 {
  Arg_0.894 = f32[] parameter(0)
  ROOT Arg_1.895 = f32[] parameter(1)
}

region_1.896 {
  arg_tuple.897 = (s32[], s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, /*index=5*/f32[6]{0}, f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], /*index=10*/f32[5]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=15*/f32[6]{0}, f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, /*index=20*/f32[6]{0}, s32[1]{0}) parameter(0)
  get-tuple-element.904 = f32[200]{0} get-tuple-element(arg_tuple.897), index=6
  get-tuple-element.905 = f32[] get-tuple-element(arg_tuple.897), index=7
  get-tuple-element.908 = f32[5]{0} get-tuple-element(arg_tuple.897), index=10
  get-tuple-element.909 = f32[6]{0} get-tuple-element(arg_tuple.897), index=11
  get-tuple-element.910 = f32[5,6]{1,0} get-tuple-element(arg_tuple.897), index=12
  get-tuple-element.911 = f32[] get-tuple-element(arg_tuple.897), index=13
  get-tuple-element.912 = f32[5]{0} get-tuple-element(arg_tuple.897), index=14
  get-tuple-element.913 = f32[6]{0} get-tuple-element(arg_tuple.897), index=15
  get-tuple-element.914 = f32[] get-tuple-element(arg_tuple.897), index=16
  get-tuple-element.902 = f32[5]{0} get-tuple-element(arg_tuple.897), index=4
  reshape.976 = f32[5,1]{1,0} reshape(get-tuple-element.902)
  broadcast.978 = f32[5,1]{1,0} broadcast(reshape.976), dimensions={0,1}
  reshape.979 = f32[5]{0} reshape(broadcast.978)
  broadcast.980 = f32[5,6]{1,0} broadcast(reshape.979), dimensions={0}
  get-tuple-element.903 = f32[6]{0} get-tuple-element(arg_tuple.897), index=5
  reshape.977 = f32[1,6]{1,0} reshape(get-tuple-element.903)
  broadcast.981 = f32[1,6]{1,0} broadcast(reshape.977), dimensions={0,1}
  reshape.982 = f32[6]{0} reshape(broadcast.981)
  broadcast.983 = f32[5,6]{1,0} broadcast(reshape.982), dimensions={1}
  add.984 = f32[5,6]{1,0} add(broadcast.980, broadcast.983)
  get-tuple-element.906 = f32[5,6]{1,0} get-tuple-element(arg_tuple.897), index=8
  subtract.985 = f32[5,6]{1,0} subtract(add.984, get-tuple-element.906)
  get-tuple-element.907 = f32[] get-tuple-element(arg_tuple.897), index=9
  broadcast.986 = f32[5,6]{1,0} broadcast(get-tuple-element.907), dimensions={}
  divide.987 = f32[5,6]{1,0} divide(subtract.985, broadcast.986)
  constant.975 = f32[] constant(-inf)
  reduce.988 = f32[5]{0} reduce(divide.987, constant.975), dimensions={1}, to_apply=region_2.24
  call.989 = pred[5]{0} call(reduce.988), to_apply=isfinite_2.28
  constant.973 = f32[] constant(0)
  broadcast.974 = f32[5]{0} broadcast(constant.973), dimensions={}
  select.990 = f32[5]{0} select(call.989, reduce.988, broadcast.974)
  reshape.991 = f32[5,1]{1,0} reshape(select.990)
  broadcast.992 = f32[5,1]{1,0} broadcast(reshape.991), dimensions={0,1}
  reshape.993 = f32[5]{0} reshape(broadcast.992)
  broadcast.994 = f32[5,6]{1,0} broadcast(reshape.993), dimensions={0}
  subtract.995 = f32[5,6]{1,0} subtract(divide.987, broadcast.994)
  exponential.996 = f32[5,6]{1,0} exponential(subtract.995)
  constant.972 = f32[] constant(0)
  reduce.997 = f32[5]{0} reduce(exponential.996, constant.972), dimensions={1}, to_apply=region_3.31
  log.998 = f32[5]{0} log(reduce.997)
  add.999 = f32[5]{0} add(log.998, select.990)
  constant.969 = f32[] constant(-inf)
  broadcast.970 = f32[5]{0} broadcast(constant.969), dimensions={}
  compare.1002 = pred[5]{0} compare(add.999, broadcast.970), direction=EQ
  call.1000 = pred[5]{0} call(add.999), to_apply=isnan_3.35
  constant.971 = f32[] constant(1)
  call.1001 = f32[5]{0} call(call.1000, add.999, constant.971), to_apply=_where.38
  call.1003 = f32[5]{0} call(compare.1002, constant.972, call.1001), to_apply=_where_4.44
  reshape.1013 = f32[5,1]{1,0} reshape(get-tuple-element.902)
  broadcast.1015 = f32[5,1]{1,0} broadcast(reshape.1013), dimensions={0,1}
  reshape.1016 = f32[5]{0} reshape(broadcast.1015)
  broadcast.1017 = f32[5,6]{1,0} broadcast(reshape.1016), dimensions={0}
  reshape.1014 = f32[1,6]{1,0} reshape(get-tuple-element.903)
  broadcast.1018 = f32[1,6]{1,0} broadcast(reshape.1014), dimensions={0,1}
  reshape.1019 = f32[6]{0} reshape(broadcast.1018)
  broadcast.1020 = f32[5,6]{1,0} broadcast(reshape.1019), dimensions={1}
  add.1021 = f32[5,6]{1,0} add(broadcast.1017, broadcast.1020)
  subtract.1022 = f32[5,6]{1,0} subtract(add.1021, get-tuple-element.906)
  broadcast.1023 = f32[5,6]{1,0} broadcast(get-tuple-element.907), dimensions={}
  divide.1024 = f32[5,6]{1,0} divide(subtract.1022, broadcast.1023)
  reduce.1025 = f32[6]{0} reduce(divide.1024, constant.975), dimensions={0}, to_apply=region_4.60
  call.1026 = pred[6]{0} call(reduce.1025), to_apply=isfinite_7.64
  constant.966 = f32[] constant(0)
  broadcast.967 = f32[6]{0} broadcast(constant.966), dimensions={}
  select.1027 = f32[6]{0} select(call.1026, reduce.1025, broadcast.967)
  reshape.1028 = f32[1,6]{1,0} reshape(select.1027)
  broadcast.1029 = f32[1,6]{1,0} broadcast(reshape.1028), dimensions={0,1}
  reshape.1030 = f32[6]{0} reshape(broadcast.1029)
  broadcast.1031 = f32[5,6]{1,0} broadcast(reshape.1030), dimensions={1}
  subtract.1032 = f32[5,6]{1,0} subtract(divide.1024, broadcast.1031)
  exponential.1033 = f32[5,6]{1,0} exponential(subtract.1032)
  reduce.1034 = f32[6]{0} reduce(exponential.1033, constant.972), dimensions={0}, to_apply=region_5.67
  log.1035 = f32[6]{0} log(reduce.1034)
  add.1036 = f32[6]{0} add(log.1035, select.1027)
  constant.964 = f32[] constant(-inf)
  broadcast.965 = f32[6]{0} broadcast(constant.964), dimensions={}
  compare.1039 = pred[6]{0} compare(add.1036, broadcast.965), direction=EQ
  call.1037 = pred[6]{0} call(add.1036), to_apply=isnan_8.71
  call.1038 = f32[6]{0} call(call.1037, add.1036, constant.971), to_apply=_where_9.74
  call.1040 = f32[6]{0} call(compare.1039, constant.972, call.1038), to_apply=_where_10.80
  constant.968 = s32[] constant(0)
  constant.931 = f32[] constant(-1)
  broadcast.932 = f32[200,1]{1,0} broadcast(constant.931), dimensions={}
  get-tuple-element.917 = f32[5]{0} get-tuple-element(arg_tuple.897), index=19
  compare.1274 = pred[5]{0} compare(get-tuple-element.917, broadcast.974), direction=GT
  call.1275 = f32[5]{0} call(compare.1274, broadcast.974, constant.975), to_apply=_where_21.241
  get-tuple-element.918 = f32[6]{0} get-tuple-element(arg_tuple.897), index=20
  compare.1276 = pred[6]{0} compare(get-tuple-element.918, broadcast.967), direction=GT
  call.1277 = f32[6]{0} call(compare.1276, broadcast.967, constant.975), to_apply=_where_22.247
  iota.1278 = s32[10]{0} iota(), iota_dimension=0
  constant.933 = s32[] constant(9)
  broadcast.934 = s32[10]{0} broadcast(constant.933), dimensions={}
  compare.1279 = pred[10]{0} compare(iota.1278, broadcast.934), direction=EQ
  iota.1050 = f32[10]{0} iota(), iota_dimension=0
  constant.962 = f32[] constant(2)
  broadcast.963 = f32[10]{0} broadcast(constant.962), dimensions={}
  multiply.1051 = f32[10]{0} multiply(iota.1050, broadcast.963)
  abs.1052 = f32[10]{0} abs(multiply.1051)
  call.1053 = f32[9]{0} call(abs.1052), to_apply=diff.96
  reduce.1054 = f32[] reduce(call.1053, constant.972), dimensions={0}, to_apply=region_6.101
  compare.1055 = pred[] compare(reduce.1054, constant.972), direction=EQ
  get-tuple-element.915 = f32[5,2]{1,0} get-tuple-element(arg_tuple.897), index=17
  multiply.1058 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1059 = f32[5]{0} reduce(multiply.1058, constant.972), dimensions={1}, to_apply=region_8.109
  broadcast.1004 = f32[5]{0} broadcast(get-tuple-element.907), dimensions={}
  multiply.1005 = f32[5]{0} multiply(broadcast.1004, add.999)
  call.1006 = pred[5]{0} call(get-tuple-element.902), to_apply=isfinite_5.50
  call.1007 = f32[5]{0} call(call.1006, get-tuple-element.902, constant.968), to_apply=_where_6.53
  subtract.1008 = f32[5]{0} subtract(multiply.1005, call.1007)
  add.1009 = f32[5]{0} add(subtract.1008, get-tuple-element.902)
  broadcast.1010 = f32[5]{0} broadcast(get-tuple-element.907), dimensions={}
  divide.1011 = f32[5]{0} divide(add.1009, broadcast.1010)
  exponential.1012 = f32[5]{0} exponential(divide.1011)
  dot.1060 = f32[] dot(reduce.1059, exponential.1012), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  reshape.1061 = f32[1,1]{1,0} reshape(dot.1060)
  broadcast.1069 = f32[1,1]{1,0} broadcast(reshape.1061), dimensions={0,1}
  reshape.1070 = f32[1]{0} reshape(broadcast.1069)
  broadcast.1071 = f32[5,1]{1,0} broadcast(reshape.1070), dimensions={1}
  multiply.1056 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1057 = f32[5]{0} reduce(multiply.1056, constant.972), dimensions={1}, to_apply=region_7.105
  reshape.1062 = f32[5,1]{1,0} reshape(reduce.1057)
  reduce.1063 = f32[] reduce(exponential.1012, constant.972), dimensions={0}, to_apply=region_9.113
  reshape.1064 = f32[1,1]{1,0} reshape(reduce.1063)
  broadcast.1065 = f32[1,1]{1,0} broadcast(reshape.1064), dimensions={0,1}
  reshape.1066 = f32[1]{0} reshape(broadcast.1065)
  broadcast.1067 = f32[5,1]{1,0} broadcast(reshape.1066), dimensions={1}
  multiply.1068 = f32[5,1]{1,0} multiply(reshape.1062, broadcast.1067)
  add.1072 = f32[5,1]{1,0} add(broadcast.1071, multiply.1068)
  transpose.1073 = f32[2,5]{0,1} transpose(get-tuple-element.915), dimensions={1,0}
  dot.1074 = f32[2]{0} dot(transpose.1073, exponential.1012), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  dot.1075 = f32[5]{0} dot(get-tuple-element.915, dot.1074), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.960 = f32[] constant(-2)
  broadcast.961 = f32[5]{0} broadcast(constant.960), dimensions={}
  multiply.1076 = f32[5]{0} multiply(dot.1075, broadcast.961)
  reshape.1077 = f32[5,1]{1,0} reshape(multiply.1076)
  add.1078 = f32[5,1]{1,0} add(add.1072, reshape.1077)
  multiply.1079 = f32[5,1]{1,0} multiply(add.1078, add.1078)
  dot.1081 = f32[5,5]{1,0} dot(get-tuple-element.915, get-tuple-element.915), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  constant.958 = f32[] constant(-2)
  broadcast.959 = f32[5,5]{1,0} broadcast(constant.958), dimensions={}
  multiply.1082 = f32[5,5]{1,0} multiply(dot.1081, broadcast.959)
  multiply.1083 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1084 = f32[5]{0} reduce(multiply.1083, constant.972), dimensions={1}, to_apply=region_10.117
  reshape.1085 = f32[5,1]{1,0} reshape(reduce.1084)
  broadcast.1089 = f32[5,1]{1,0} broadcast(reshape.1085), dimensions={0,1}
  reshape.1090 = f32[5]{0} reshape(broadcast.1089)
  broadcast.1091 = f32[5,5]{1,0} broadcast(reshape.1090), dimensions={0}
  multiply.1086 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1087 = f32[5]{0} reduce(multiply.1086, constant.972), dimensions={1}, to_apply=region_11.121
  reshape.1088 = f32[1,5]{1,0} reshape(reduce.1087)
  broadcast.1092 = f32[1,5]{1,0} broadcast(reshape.1088), dimensions={0,1}
  reshape.1093 = f32[5]{0} reshape(broadcast.1092)
  broadcast.1094 = f32[5,5]{1,0} broadcast(reshape.1093), dimensions={1}
  add.1095 = f32[5,5]{1,0} add(broadcast.1091, broadcast.1094)
  add.1096 = f32[5,5]{1,0} add(multiply.1082, add.1095)
  constant.956 = f32[] constant(1)
  broadcast.957 = f32[5,5]{1,0} broadcast(constant.956), dimensions={}
  power.1097 = f32[5,5]{1,0} power(add.1096, broadcast.957)
  multiply.1098 = f32[5,5]{1,0} multiply(power.1097, power.1097)
  reshape.1080 = f32[5,1]{1,0} reshape(exponential.1012)
  dot.1099 = f32[5,1]{1,0} dot(multiply.1098, reshape.1080), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  call.1100 = f32[5,1]{1,0} call(compare.1055, multiply.1079, dot.1099), to_apply=_where_13.125
  constant.948 = f32[] constant(1)
  broadcast.949 = f32[5,1]{1,0} broadcast(constant.948), dimensions={}
  concatenate.1152 = f32[5,2]{1,0} concatenate(call.1100, broadcast.949), dimensions={1}
  constant.946 = f32[] constant(1)
  broadcast.947 = f32[6,1]{1,0} broadcast(constant.946), dimensions={}
  iota.1101 = f32[10]{0} iota(), iota_dimension=0
  multiply.1102 = f32[10]{0} multiply(iota.1101, broadcast.963)
  abs.1103 = f32[10]{0} abs(multiply.1102)
  call.1104 = f32[9]{0} call(abs.1103), to_apply=diff_14.131
  reduce.1105 = f32[] reduce(call.1104, constant.972), dimensions={0}, to_apply=region_12.136
  compare.1106 = pred[] compare(reduce.1105, constant.972), direction=EQ
  get-tuple-element.916 = f32[6,3]{1,0} get-tuple-element(arg_tuple.897), index=18
  multiply.1109 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1110 = f32[6]{0} reduce(multiply.1109, constant.972), dimensions={1}, to_apply=region_14.144
  broadcast.1041 = f32[6]{0} broadcast(get-tuple-element.907), dimensions={}
  multiply.1042 = f32[6]{0} multiply(broadcast.1041, add.1036)
  call.1043 = pred[6]{0} call(get-tuple-element.903), to_apply=isfinite_11.86
  call.1044 = f32[6]{0} call(call.1043, get-tuple-element.903, constant.968), to_apply=_where_12.89
  subtract.1045 = f32[6]{0} subtract(multiply.1042, call.1044)
  add.1046 = f32[6]{0} add(subtract.1045, get-tuple-element.903)
  broadcast.1047 = f32[6]{0} broadcast(get-tuple-element.907), dimensions={}
  divide.1048 = f32[6]{0} divide(add.1046, broadcast.1047)
  exponential.1049 = f32[6]{0} exponential(divide.1048)
  dot.1111 = f32[] dot(reduce.1110, exponential.1049), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  reshape.1112 = f32[1,1]{1,0} reshape(dot.1111)
  broadcast.1120 = f32[1,1]{1,0} broadcast(reshape.1112), dimensions={0,1}
  reshape.1121 = f32[1]{0} reshape(broadcast.1120)
  broadcast.1122 = f32[6,1]{1,0} broadcast(reshape.1121), dimensions={1}
  multiply.1107 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1108 = f32[6]{0} reduce(multiply.1107, constant.972), dimensions={1}, to_apply=region_13.140
  reshape.1113 = f32[6,1]{1,0} reshape(reduce.1108)
  reduce.1114 = f32[] reduce(exponential.1049, constant.972), dimensions={0}, to_apply=region_15.148
  reshape.1115 = f32[1,1]{1,0} reshape(reduce.1114)
  broadcast.1116 = f32[1,1]{1,0} broadcast(reshape.1115), dimensions={0,1}
  reshape.1117 = f32[1]{0} reshape(broadcast.1116)
  broadcast.1118 = f32[6,1]{1,0} broadcast(reshape.1117), dimensions={1}
  multiply.1119 = f32[6,1]{1,0} multiply(reshape.1113, broadcast.1118)
  add.1123 = f32[6,1]{1,0} add(broadcast.1122, multiply.1119)
  transpose.1124 = f32[3,6]{0,1} transpose(get-tuple-element.916), dimensions={1,0}
  dot.1125 = f32[3]{0} dot(transpose.1124, exponential.1049), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  dot.1126 = f32[6]{0} dot(get-tuple-element.916, dot.1125), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.954 = f32[] constant(-2)
  broadcast.955 = f32[6]{0} broadcast(constant.954), dimensions={}
  multiply.1127 = f32[6]{0} multiply(dot.1126, broadcast.955)
  reshape.1128 = f32[6,1]{1,0} reshape(multiply.1127)
  add.1129 = f32[6,1]{1,0} add(add.1123, reshape.1128)
  multiply.1130 = f32[6,1]{1,0} multiply(add.1129, add.1129)
  dot.1132 = f32[6,6]{1,0} dot(get-tuple-element.916, get-tuple-element.916), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  constant.952 = f32[] constant(-2)
  broadcast.953 = f32[6,6]{1,0} broadcast(constant.952), dimensions={}
  multiply.1133 = f32[6,6]{1,0} multiply(dot.1132, broadcast.953)
  multiply.1134 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1135 = f32[6]{0} reduce(multiply.1134, constant.972), dimensions={1}, to_apply=region_16.152
  reshape.1136 = f32[6,1]{1,0} reshape(reduce.1135)
  broadcast.1140 = f32[6,1]{1,0} broadcast(reshape.1136), dimensions={0,1}
  reshape.1141 = f32[6]{0} reshape(broadcast.1140)
  broadcast.1142 = f32[6,6]{1,0} broadcast(reshape.1141), dimensions={0}
  multiply.1137 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1138 = f32[6]{0} reduce(multiply.1137, constant.972), dimensions={1}, to_apply=region_17.156
  reshape.1139 = f32[1,6]{1,0} reshape(reduce.1138)
  broadcast.1143 = f32[1,6]{1,0} broadcast(reshape.1139), dimensions={0,1}
  reshape.1144 = f32[6]{0} reshape(broadcast.1143)
  broadcast.1145 = f32[6,6]{1,0} broadcast(reshape.1144), dimensions={1}
  add.1146 = f32[6,6]{1,0} add(broadcast.1142, broadcast.1145)
  add.1147 = f32[6,6]{1,0} add(multiply.1133, add.1146)
  constant.950 = f32[] constant(1)
  broadcast.951 = f32[6,6]{1,0} broadcast(constant.950), dimensions={}
  power.1148 = f32[6,6]{1,0} power(add.1147, broadcast.951)
  multiply.1149 = f32[6,6]{1,0} multiply(power.1148, power.1148)
  reshape.1131 = f32[6,1]{1,0} reshape(exponential.1049)
  dot.1150 = f32[6,1]{1,0} dot(multiply.1149, reshape.1131), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  call.1151 = f32[6,1]{1,0} call(compare.1106, multiply.1130, dot.1150), to_apply=_where_15.160
  concatenate.1153 = f32[6,2]{1,0} concatenate(broadcast.947, call.1151), dimensions={1}
  transpose.1267 = f32[2,6]{0,1} transpose(concatenate.1153), dimensions={1,0}
  dot.1268 = f32[5,6]{1,0} dot(concatenate.1152, transpose.1267), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  abs.1216 = f32[10]{0} abs(broadcast.963)
  call.1217 = f32[9]{0} call(abs.1216), to_apply=diff_18.201
  reduce.1218 = f32[] reduce(call.1217, constant.972), dimensions={0}, to_apply=region_24.206
  compare.1219 = pred[] compare(reduce.1218, constant.972), direction=EQ
  multiply.1222 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1223 = f32[6]{0} reduce(multiply.1222, constant.972), dimensions={1}, to_apply=region_26.214
  constant.944 = f32[] constant(1)
  broadcast.945 = f32[10]{0} broadcast(constant.944), dimensions={}
  abs.1167 = f32[10]{0} abs(broadcast.945)
  call.1168 = f32[9]{0} call(abs.1167), to_apply=diff_16.166
  reduce.1169 = f32[] reduce(call.1168, constant.972), dimensions={0}, to_apply=region_18.171
  compare.1170 = pred[] compare(reduce.1169, constant.972), direction=EQ
  multiply.1173 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1174 = f32[5]{0} reduce(multiply.1173, constant.972), dimensions={1}, to_apply=region_20.179
  reshape.1154 = f32[5,1]{1,0} reshape(get-tuple-element.902)
  broadcast.1156 = f32[5,1]{1,0} broadcast(reshape.1154), dimensions={0,1}
  reshape.1157 = f32[5]{0} reshape(broadcast.1156)
  broadcast.1158 = f32[5,6]{1,0} broadcast(reshape.1157), dimensions={0}
  reshape.1155 = f32[1,6]{1,0} reshape(get-tuple-element.903)
  broadcast.1159 = f32[1,6]{1,0} broadcast(reshape.1155), dimensions={0,1}
  reshape.1160 = f32[6]{0} reshape(broadcast.1159)
  broadcast.1161 = f32[5,6]{1,0} broadcast(reshape.1160), dimensions={1}
  add.1162 = f32[5,6]{1,0} add(broadcast.1158, broadcast.1161)
  subtract.1163 = f32[5,6]{1,0} subtract(add.1162, get-tuple-element.906)
  broadcast.1164 = f32[5,6]{1,0} broadcast(get-tuple-element.907), dimensions={}
  divide.1165 = f32[5,6]{1,0} divide(subtract.1163, broadcast.1164)
  exponential.1166 = f32[5,6]{1,0} exponential(divide.1165)
  dot.1175 = f32[6]{0} dot(reduce.1174, exponential.1166), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  reshape.1176 = f32[1,6]{1,0} reshape(dot.1175)
  broadcast.1187 = f32[1,6]{1,0} broadcast(reshape.1176), dimensions={0,1}
  reshape.1188 = f32[6]{0} reshape(broadcast.1187)
  broadcast.1189 = f32[5,6]{1,0} broadcast(reshape.1188), dimensions={1}
  multiply.1171 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1172 = f32[5]{0} reduce(multiply.1171, constant.972), dimensions={1}, to_apply=region_19.175
  reshape.1177 = f32[5,1]{1,0} reshape(reduce.1172)
  broadcast.1180 = f32[5,1]{1,0} broadcast(reshape.1177), dimensions={0,1}
  reshape.1181 = f32[5]{0} reshape(broadcast.1180)
  broadcast.1182 = f32[5,6]{1,0} broadcast(reshape.1181), dimensions={0}
  reduce.1178 = f32[6]{0} reduce(exponential.1166, constant.972), dimensions={0}, to_apply=region_21.183
  reshape.1179 = f32[1,6]{1,0} reshape(reduce.1178)
  broadcast.1183 = f32[1,6]{1,0} broadcast(reshape.1179), dimensions={0,1}
  reshape.1184 = f32[6]{0} reshape(broadcast.1183)
  broadcast.1185 = f32[5,6]{1,0} broadcast(reshape.1184), dimensions={1}
  multiply.1186 = f32[5,6]{1,0} multiply(broadcast.1182, broadcast.1185)
  add.1190 = f32[5,6]{1,0} add(broadcast.1189, multiply.1186)
  transpose.1191 = f32[2,5]{0,1} transpose(get-tuple-element.915), dimensions={1,0}
  dot.1192 = f32[2,6]{1,0} dot(transpose.1191, exponential.1166), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  dot.1193 = f32[5,6]{1,0} dot(get-tuple-element.915, dot.1192), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.942 = f32[] constant(-2)
  broadcast.943 = f32[5,6]{1,0} broadcast(constant.942), dimensions={}
  multiply.1194 = f32[5,6]{1,0} multiply(dot.1193, broadcast.943)
  add.1195 = f32[5,6]{1,0} add(add.1190, multiply.1194)
  dot.1196 = f32[5,5]{1,0} dot(get-tuple-element.915, get-tuple-element.915), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  multiply.1197 = f32[5,5]{1,0} multiply(dot.1196, broadcast.959)
  multiply.1198 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1199 = f32[5]{0} reduce(multiply.1198, constant.972), dimensions={1}, to_apply=region_22.187
  reshape.1200 = f32[5,1]{1,0} reshape(reduce.1199)
  broadcast.1204 = f32[5,1]{1,0} broadcast(reshape.1200), dimensions={0,1}
  reshape.1205 = f32[5]{0} reshape(broadcast.1204)
  broadcast.1206 = f32[5,5]{1,0} broadcast(reshape.1205), dimensions={0}
  multiply.1201 = f32[5,2]{1,0} multiply(get-tuple-element.915, get-tuple-element.915)
  reduce.1202 = f32[5]{0} reduce(multiply.1201, constant.972), dimensions={1}, to_apply=region_23.191
  reshape.1203 = f32[1,5]{1,0} reshape(reduce.1202)
  broadcast.1207 = f32[1,5]{1,0} broadcast(reshape.1203), dimensions={0,1}
  reshape.1208 = f32[5]{0} reshape(broadcast.1207)
  broadcast.1209 = f32[5,5]{1,0} broadcast(reshape.1208), dimensions={1}
  add.1210 = f32[5,5]{1,0} add(broadcast.1206, broadcast.1209)
  add.1211 = f32[5,5]{1,0} add(multiply.1197, add.1210)
  power.1212 = f32[5,5]{1,0} power(add.1211, broadcast.957)
  dot.1213 = f32[5,6]{1,0} dot(power.1212, exponential.1166), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  call.1214 = f32[5,6]{1,0} call(compare.1170, add.1195, dot.1213), to_apply=_where_17.195
  transpose.1215 = f32[6,5]{0,1} transpose(call.1214), dimensions={1,0}
  dot.1224 = f32[5]{0} dot(reduce.1223, transpose.1215), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  reshape.1225 = f32[1,5]{1,0} reshape(dot.1224)
  broadcast.1236 = f32[1,5]{1,0} broadcast(reshape.1225), dimensions={0,1}
  reshape.1237 = f32[5]{0} reshape(broadcast.1236)
  broadcast.1238 = f32[6,5]{1,0} broadcast(reshape.1237), dimensions={1}
  multiply.1220 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1221 = f32[6]{0} reduce(multiply.1220, constant.972), dimensions={1}, to_apply=region_25.210
  reshape.1226 = f32[6,1]{1,0} reshape(reduce.1221)
  broadcast.1229 = f32[6,1]{1,0} broadcast(reshape.1226), dimensions={0,1}
  reshape.1230 = f32[6]{0} reshape(broadcast.1229)
  broadcast.1231 = f32[6,5]{1,0} broadcast(reshape.1230), dimensions={0}
  reduce.1227 = f32[5]{0} reduce(transpose.1215, constant.972), dimensions={0}, to_apply=region_27.218
  reshape.1228 = f32[1,5]{1,0} reshape(reduce.1227)
  broadcast.1232 = f32[1,5]{1,0} broadcast(reshape.1228), dimensions={0,1}
  reshape.1233 = f32[5]{0} reshape(broadcast.1232)
  broadcast.1234 = f32[6,5]{1,0} broadcast(reshape.1233), dimensions={1}
  multiply.1235 = f32[6,5]{1,0} multiply(broadcast.1231, broadcast.1234)
  add.1239 = f32[6,5]{1,0} add(broadcast.1238, multiply.1235)
  transpose.1240 = f32[3,6]{0,1} transpose(get-tuple-element.916), dimensions={1,0}
  dot.1241 = f32[3,5]{1,0} dot(transpose.1240, transpose.1215), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  dot.1242 = f32[6,5]{1,0} dot(get-tuple-element.916, dot.1241), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.940 = f32[] constant(-2)
  broadcast.941 = f32[6,5]{1,0} broadcast(constant.940), dimensions={}
  multiply.1243 = f32[6,5]{1,0} multiply(dot.1242, broadcast.941)
  add.1244 = f32[6,5]{1,0} add(add.1239, multiply.1243)
  constant.938 = f32[] constant(2)
  broadcast.939 = f32[6,5]{1,0} broadcast(constant.938), dimensions={}
  multiply.1245 = f32[6,5]{1,0} multiply(add.1244, broadcast.939)
  dot.1246 = f32[6,6]{1,0} dot(get-tuple-element.916, get-tuple-element.916), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  multiply.1247 = f32[6,6]{1,0} multiply(dot.1246, broadcast.953)
  multiply.1248 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1249 = f32[6]{0} reduce(multiply.1248, constant.972), dimensions={1}, to_apply=region_28.222
  reshape.1250 = f32[6,1]{1,0} reshape(reduce.1249)
  broadcast.1254 = f32[6,1]{1,0} broadcast(reshape.1250), dimensions={0,1}
  reshape.1255 = f32[6]{0} reshape(broadcast.1254)
  broadcast.1256 = f32[6,6]{1,0} broadcast(reshape.1255), dimensions={0}
  multiply.1251 = f32[6,3]{1,0} multiply(get-tuple-element.916, get-tuple-element.916)
  reduce.1252 = f32[6]{0} reduce(multiply.1251, constant.972), dimensions={1}, to_apply=region_29.226
  reshape.1253 = f32[1,6]{1,0} reshape(reduce.1252)
  broadcast.1257 = f32[1,6]{1,0} broadcast(reshape.1253), dimensions={0,1}
  reshape.1258 = f32[6]{0} reshape(broadcast.1257)
  broadcast.1259 = f32[6,6]{1,0} broadcast(reshape.1258), dimensions={1}
  add.1260 = f32[6,6]{1,0} add(broadcast.1256, broadcast.1259)
  add.1261 = f32[6,6]{1,0} add(multiply.1247, add.1260)
  power.1262 = f32[6,6]{1,0} power(add.1261, broadcast.951)
  constant.936 = f32[] constant(2)
  broadcast.937 = f32[6,6]{1,0} broadcast(constant.936), dimensions={}
  multiply.1263 = f32[6,6]{1,0} multiply(power.1262, broadcast.937)
  dot.1264 = f32[6,5]{1,0} dot(multiply.1263, transpose.1215), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  call.1265 = f32[6,5]{1,0} call(compare.1219, multiply.1245, dot.1264), to_apply=_where_19.230
  transpose.1266 = f32[5,6]{0,1} transpose(call.1265), dimensions={1,0}
  subtract.1269 = f32[5,6]{1,0} subtract(dot.1268, transpose.1266)
  constant.935 = pred[] constant(false)
  call.1270 = f32[] call(constant.935, constant.972, constant.972), to_apply=_where_20.236
  multiply.1271 = f32[] multiply(call.1270, constant.972)
  broadcast.1272 = f32[5,6]{1,0} broadcast(multiply.1271), dimensions={}
  add.1273 = f32[5,6]{1,0} add(subtract.1269, broadcast.1272)
  get-tuple-element.919 = s32[1]{0} get-tuple-element(arg_tuple.897), index=21
  tuple.1280 = (s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, pred[10]{0}, /*index=5*/f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) tuple(constant.968, broadcast.932, call.1275, call.1277, compare.1279, /*index=5*/get-tuple-element.918, add.1273, get-tuple-element.917, get-tuple-element.919)
  while.1281 = (s32[], f32[200,1]{1,0}, f32[5]{0}, f32[6]{0}, pred[10]{0}, /*index=5*/f32[6]{0}, f32[5,6]{1,0}, f32[5]{0}, s32[1]{0}) while(tuple.1280), condition=region_41.735, body=region_30.688
  get-tuple-element.1282 = s32[] get-tuple-element(while.1281), index=0
  get-tuple-element.1286 = pred[10]{0} get-tuple-element(while.1281), index=4
  get-tuple-element.1287 = f32[6]{0} get-tuple-element(while.1281), index=5
  get-tuple-element.1288 = f32[5,6]{1,0} get-tuple-element(while.1281), index=6
  get-tuple-element.1289 = f32[5]{0} get-tuple-element(while.1281), index=7
  get-tuple-element.1290 = s32[1]{0} get-tuple-element(while.1281), index=8
  get-tuple-element.1284 = f32[5]{0} get-tuple-element(while.1281), index=2
  reshape.1306 = f32[5,1]{1,0} reshape(get-tuple-element.1284)
  broadcast.1308 = f32[5,1]{1,0} broadcast(reshape.1306), dimensions={0,1}
  reshape.1309 = f32[5]{0} reshape(broadcast.1308)
  broadcast.1310 = f32[5,6]{1,0} broadcast(reshape.1309), dimensions={0}
  get-tuple-element.1285 = f32[6]{0} get-tuple-element(while.1281), index=3
  reshape.1307 = f32[1,6]{1,0} reshape(get-tuple-element.1285)
  broadcast.1311 = f32[1,6]{1,0} broadcast(reshape.1307), dimensions={0,1}
  reshape.1312 = f32[6]{0} reshape(broadcast.1311)
  broadcast.1313 = f32[5,6]{1,0} broadcast(reshape.1312), dimensions={1}
  add.1314 = f32[5,6]{1,0} add(broadcast.1310, broadcast.1313)
  subtract.1315 = f32[5,6]{1,0} subtract(add.1314, add.1273)
  constant.925 = f32[] constant(0.1)
  broadcast.926 = f32[5,6]{1,0} broadcast(constant.925), dimensions={}
  divide.1316 = f32[5,6]{1,0} divide(subtract.1315, broadcast.926)
  reduce.1317 = f32[6]{0} reduce(divide.1316, constant.975), dimensions={0}, to_apply=region_44.791
  call.1318 = pred[6]{0} call(reduce.1317), to_apply=isfinite_60.795
  select.1319 = f32[6]{0} select(call.1318, reduce.1317, broadcast.967)
  reshape.1320 = f32[1,6]{1,0} reshape(select.1319)
  broadcast.1321 = f32[1,6]{1,0} broadcast(reshape.1320), dimensions={0,1}
  reshape.1322 = f32[6]{0} reshape(broadcast.1321)
  broadcast.1323 = f32[5,6]{1,0} broadcast(reshape.1322), dimensions={1}
  subtract.1324 = f32[5,6]{1,0} subtract(divide.1316, broadcast.1323)
  exponential.1325 = f32[5,6]{1,0} exponential(subtract.1324)
  reduce.1326 = f32[6]{0} reduce(exponential.1325, constant.972), dimensions={0}, to_apply=region_45.798
  log.1327 = f32[6]{0} log(reduce.1326)
  add.1328 = f32[6]{0} add(log.1327, select.1319)
  compare.1331 = pred[6]{0} compare(add.1328, broadcast.965), direction=EQ
  call.1329 = pred[6]{0} call(add.1328), to_apply=isnan_61.802
  call.1330 = f32[6]{0} call(call.1329, add.1328, constant.971), to_apply=_where_62.805
  call.1332 = f32[6]{0} call(compare.1331, constant.972, call.1330), to_apply=_where_63.811
  reshape.1348 = f32[5,1]{1,0} reshape(get-tuple-element.902)
  broadcast.1350 = f32[5,1]{1,0} broadcast(reshape.1348), dimensions={0,1}
  reshape.1351 = f32[5]{0} reshape(broadcast.1350)
  broadcast.1352 = f32[5,6]{1,0} broadcast(reshape.1351), dimensions={0}
  reshape.1349 = f32[1,6]{1,0} reshape(get-tuple-element.903)
  broadcast.1353 = f32[1,6]{1,0} broadcast(reshape.1349), dimensions={0,1}
  reshape.1354 = f32[6]{0} reshape(broadcast.1353)
  broadcast.1355 = f32[5,6]{1,0} broadcast(reshape.1354), dimensions={1}
  add.1356 = f32[5,6]{1,0} add(broadcast.1352, broadcast.1355)
  subtract.1357 = f32[5,6]{1,0} subtract(add.1356, get-tuple-element.906)
  broadcast.1358 = f32[5,6]{1,0} broadcast(get-tuple-element.907), dimensions={}
  divide.1359 = f32[5,6]{1,0} divide(subtract.1357, broadcast.1358)
  reduce.1360 = f32[6]{0} reduce(divide.1359, constant.975), dimensions={0}, to_apply=region_49.839
  call.1361 = pred[6]{0} call(reduce.1360), to_apply=isfinite_66.843
  select.1362 = f32[6]{0} select(call.1361, reduce.1360, broadcast.967)
  reshape.1363 = f32[1,6]{1,0} reshape(select.1362)
  broadcast.1364 = f32[1,6]{1,0} broadcast(reshape.1363), dimensions={0,1}
  reshape.1365 = f32[6]{0} reshape(broadcast.1364)
  broadcast.1366 = f32[5,6]{1,0} broadcast(reshape.1365), dimensions={1}
  subtract.1367 = f32[5,6]{1,0} subtract(divide.1359, broadcast.1366)
  exponential.1368 = f32[5,6]{1,0} exponential(subtract.1367)
  reduce.1369 = f32[6]{0} reduce(exponential.1368, constant.972), dimensions={0}, to_apply=region_50.846
  log.1370 = f32[6]{0} log(reduce.1369)
  add.1371 = f32[6]{0} add(log.1370, select.1362)
  compare.1374 = pred[6]{0} compare(add.1371, broadcast.965), direction=EQ
  call.1372 = pred[6]{0} call(add.1371), to_apply=isnan_67.850
  call.1373 = f32[6]{0} call(call.1372, add.1371, constant.971), to_apply=_where_68.853
  call.1375 = f32[6]{0} call(compare.1374, constant.972, call.1373), to_apply=_where_69.859
  get-tuple-element.898 = s32[] get-tuple-element(arg_tuple.897), index=0
  constant.920 = s32[] constant(1)
  add.1407 = s32[] add(get-tuple-element.898, constant.920)
  get-tuple-element.899 = s32[] get-tuple-element(arg_tuple.897), index=1
  add.1406 = s32[] add(get-tuple-element.899, constant.920)
  get-tuple-element.900 = f32[50]{0} get-tuple-element(arg_tuple.897), index=2
  compare.1386 = pred[] compare(get-tuple-element.899, constant.968), direction=LT
  constant.923 = s32[] constant(50)
  add.1387 = s32[] add(get-tuple-element.899, constant.923)
  select.1388 = s32[] select(compare.1386, add.1387, get-tuple-element.899)
  reshape.1389 = s32[1]{0} reshape(select.1388)
  compare.1292 = pred[5]{0} compare(get-tuple-element.917, broadcast.974), direction=GT
  log.1294 = f32[5]{0} log(get-tuple-element.917)
  constant.929 = f32[] constant(0.1)
  broadcast.930 = f32[5]{0} broadcast(constant.929), dimensions={}
  multiply.1295 = f32[5]{0} multiply(log.1294, broadcast.930)
  subtract.1296 = f32[5]{0} subtract(get-tuple-element.1284, multiply.1295)
  multiply.1297 = f32[5]{0} multiply(get-tuple-element.917, subtract.1296)
  call.1298 = f32[5]{0} call(compare.1292, multiply.1297, constant.972), to_apply=_where_58.771
  reduce.1299 = f32[] reduce(call.1298, constant.972), dimensions={0}, to_apply=region_42.777
  compare.1293 = pred[6]{0} compare(get-tuple-element.918, broadcast.967), direction=GT
  log.1300 = f32[6]{0} log(get-tuple-element.918)
  constant.927 = f32[] constant(0.1)
  broadcast.928 = f32[6]{0} broadcast(constant.927), dimensions={}
  multiply.1301 = f32[6]{0} multiply(log.1300, broadcast.928)
  subtract.1302 = f32[6]{0} subtract(get-tuple-element.1285, multiply.1301)
  multiply.1303 = f32[6]{0} multiply(get-tuple-element.918, subtract.1302)
  call.1304 = f32[6]{0} call(compare.1293, multiply.1303, constant.972), to_apply=_where_59.781
  reduce.1305 = f32[] reduce(call.1304, constant.972), dimensions={0}, to_apply=region_43.787
  add.1341 = f32[] add(reduce.1299, reduce.1305)
  reduce.1342 = f32[] reduce(get-tuple-element.917, constant.972), dimensions={0}, to_apply=region_47.831
  reduce.1343 = f32[] reduce(get-tuple-element.918, constant.972), dimensions={0}, to_apply=region_48.835
  multiply.1344 = f32[] multiply(reduce.1342, reduce.1343)
  multiply.1333 = f32[6]{0} multiply(add.1328, broadcast.928)
  call.1334 = pred[6]{0} call(get-tuple-element.1285), to_apply=isfinite_64.817
  call.1335 = f32[6]{0} call(call.1334, get-tuple-element.1285, constant.968), to_apply=_where_65.820
  subtract.1336 = f32[6]{0} subtract(multiply.1333, call.1335)
  add.1337 = f32[6]{0} add(subtract.1336, get-tuple-element.1285)
  divide.1338 = f32[6]{0} divide(add.1337, broadcast.928)
  exponential.1339 = f32[6]{0} exponential(divide.1338)
  reduce.1340 = f32[] reduce(exponential.1339, constant.972), dimensions={0}, to_apply=region_46.827
  subtract.1345 = f32[] subtract(multiply.1344, reduce.1340)
  constant.924 = f32[] constant(0.1)
  multiply.1346 = f32[] multiply(subtract.1345, constant.924)
  add.1347 = f32[] add(add.1341, multiply.1346)
  scatter.1390 = f32[50]{0} scatter(get-tuple-element.900, reshape.1389, add.1347), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_52.879
  get-tuple-element.901 = f32[50]{0} get-tuple-element(arg_tuple.897), index=3
  compare.1400 = pred[] compare(get-tuple-element.899, constant.968), direction=LT
  add.1401 = s32[] add(get-tuple-element.899, constant.923)
  select.1402 = s32[] select(compare.1400, add.1401, get-tuple-element.899)
  reshape.1403 = s32[1]{0} reshape(select.1402)
  get-tuple-element.1283 = f32[200,1]{1,0} get-tuple-element(while.1281), index=1
  reshape.1291 = f32[200]{0} reshape(get-tuple-element.1283)
  constant.921 = f32[] constant(-1)
  broadcast.922 = f32[200]{0} broadcast(constant.921), dimensions={}
  compare.1391 = pred[200]{0} compare(reshape.1291, broadcast.922), direction=EQ
  convert.1392 = s32[200]{0} convert(compare.1391)
  reduce.1393 = s32[] reduce(convert.1392, constant.968), dimensions={0}, to_apply=region_53.882
  compare.1394 = pred[] compare(reduce.1393, constant.968), direction=GT
  call.1395 = pred[200]{0} call(reshape.1291), to_apply=isnan_72.886
  convert.1396 = s32[200]{0} convert(call.1395)
  reduce.1397 = s32[] reduce(convert.1396, constant.968), dimensions={0}, to_apply=region_54.889
  compare.1398 = pred[] compare(reduce.1397, constant.968), direction=EQ
  and.1399 = pred[] and(compare.1394, compare.1398)
  convert.1404 = f32[] convert(and.1399)
  scatter.1405 = f32[50]{0} scatter(get-tuple-element.901, reshape.1403, convert.1404), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_55.893
  broadcast.1376 = f32[6]{0} broadcast(get-tuple-element.907), dimensions={}
  multiply.1377 = f32[6]{0} multiply(broadcast.1376, add.1371)
  call.1378 = pred[6]{0} call(get-tuple-element.903), to_apply=isfinite_70.865
  call.1379 = f32[6]{0} call(call.1378, get-tuple-element.903, constant.968), to_apply=_where_71.868
  subtract.1380 = f32[6]{0} subtract(multiply.1377, call.1379)
  add.1381 = f32[6]{0} add(subtract.1380, get-tuple-element.903)
  broadcast.1382 = f32[6]{0} broadcast(get-tuple-element.907), dimensions={}
  divide.1383 = f32[6]{0} divide(add.1381, broadcast.1382)
  exponential.1384 = f32[6]{0} exponential(divide.1383)
  reduce.1385 = f32[] reduce(exponential.1384, constant.972), dimensions={0}, to_apply=region_51.875
  ROOT tuple.1408 = (s32[], s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, /*index=5*/f32[6]{0}, f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], /*index=10*/f32[5]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=15*/f32[6]{0}, f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, /*index=20*/f32[6]{0}, s32[1]{0}) tuple(add.1407, add.1406, scatter.1390, scatter.1405, get-tuple-element.1284, /*index=5*/get-tuple-element.1285, reshape.1291, add.1347, add.1273, constant.924, /*index=10*/get-tuple-element.917, get-tuple-element.918, add.1273, constant.924, get-tuple-element.917, /*index=15*/get-tuple-element.918, reduce.1385, get-tuple-element.915, get-tuple-element.916, get-tuple-element.917, /*index=20*/get-tuple-element.918, get-tuple-element.919)
}

region_56.1409 {
  arg_tuple.1410 = (s32[], s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, /*index=5*/f32[6]{0}, f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], /*index=10*/f32[5]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=15*/f32[6]{0}, f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, /*index=20*/f32[6]{0}, s32[1]{0}) parameter(0)
  get-tuple-element.1412 = s32[] get-tuple-element(arg_tuple.1410), index=1
  get-tuple-element.1413 = f32[50]{0} get-tuple-element(arg_tuple.1410), index=2
  get-tuple-element.1414 = f32[50]{0} get-tuple-element(arg_tuple.1410), index=3
  get-tuple-element.1415 = f32[5]{0} get-tuple-element(arg_tuple.1410), index=4
  get-tuple-element.1416 = f32[6]{0} get-tuple-element(arg_tuple.1410), index=5
  get-tuple-element.1417 = f32[200]{0} get-tuple-element(arg_tuple.1410), index=6
  get-tuple-element.1418 = f32[] get-tuple-element(arg_tuple.1410), index=7
  get-tuple-element.1419 = f32[5,6]{1,0} get-tuple-element(arg_tuple.1410), index=8
  get-tuple-element.1420 = f32[] get-tuple-element(arg_tuple.1410), index=9
  get-tuple-element.1421 = f32[5]{0} get-tuple-element(arg_tuple.1410), index=10
  get-tuple-element.1422 = f32[6]{0} get-tuple-element(arg_tuple.1410), index=11
  get-tuple-element.1423 = f32[5,6]{1,0} get-tuple-element(arg_tuple.1410), index=12
  get-tuple-element.1424 = f32[] get-tuple-element(arg_tuple.1410), index=13
  get-tuple-element.1425 = f32[5]{0} get-tuple-element(arg_tuple.1410), index=14
  get-tuple-element.1426 = f32[6]{0} get-tuple-element(arg_tuple.1410), index=15
  get-tuple-element.1427 = f32[] get-tuple-element(arg_tuple.1410), index=16
  get-tuple-element.1428 = f32[5,2]{1,0} get-tuple-element(arg_tuple.1410), index=17
  get-tuple-element.1429 = f32[6,3]{1,0} get-tuple-element(arg_tuple.1410), index=18
  get-tuple-element.1430 = f32[5]{0} get-tuple-element(arg_tuple.1410), index=19
  get-tuple-element.1431 = f32[6]{0} get-tuple-element(arg_tuple.1410), index=20
  get-tuple-element.1432 = s32[1]{0} get-tuple-element(arg_tuple.1410), index=21
  get-tuple-element.1411 = s32[] get-tuple-element(arg_tuple.1410), index=0
  constant.1433 = s32[] constant(1)
  ROOT compare.1434 = pred[] compare(get-tuple-element.1411, constant.1433), direction=LT
}

region_0.1435 {
  constant.1458 = s32[] constant(0)
  arg_tuple.1436 = (s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, f32[6]{0}, /*index=5*/f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=10*/f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, f32[6]{0}, /*index=15*/f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, f32[6]{0}, /*index=20*/s32[1]{0}) parameter(0)
  get-tuple-element.1437 = s32[] get-tuple-element(arg_tuple.1436), index=0
  get-tuple-element.1438 = f32[50]{0} get-tuple-element(arg_tuple.1436), index=1
  get-tuple-element.1439 = f32[50]{0} get-tuple-element(arg_tuple.1436), index=2
  get-tuple-element.1440 = f32[5]{0} get-tuple-element(arg_tuple.1436), index=3
  get-tuple-element.1441 = f32[6]{0} get-tuple-element(arg_tuple.1436), index=4
  get-tuple-element.1442 = f32[200]{0} get-tuple-element(arg_tuple.1436), index=5
  get-tuple-element.1443 = f32[] get-tuple-element(arg_tuple.1436), index=6
  get-tuple-element.1444 = f32[5,6]{1,0} get-tuple-element(arg_tuple.1436), index=7
  get-tuple-element.1445 = f32[] get-tuple-element(arg_tuple.1436), index=8
  get-tuple-element.1446 = f32[5]{0} get-tuple-element(arg_tuple.1436), index=9
  get-tuple-element.1447 = f32[6]{0} get-tuple-element(arg_tuple.1436), index=10
  get-tuple-element.1448 = f32[5,6]{1,0} get-tuple-element(arg_tuple.1436), index=11
  get-tuple-element.1449 = f32[] get-tuple-element(arg_tuple.1436), index=12
  get-tuple-element.1450 = f32[5]{0} get-tuple-element(arg_tuple.1436), index=13
  get-tuple-element.1451 = f32[6]{0} get-tuple-element(arg_tuple.1436), index=14
  get-tuple-element.1452 = f32[] get-tuple-element(arg_tuple.1436), index=15
  get-tuple-element.1453 = f32[5,2]{1,0} get-tuple-element(arg_tuple.1436), index=16
  get-tuple-element.1454 = f32[6,3]{1,0} get-tuple-element(arg_tuple.1436), index=17
  get-tuple-element.1455 = f32[5]{0} get-tuple-element(arg_tuple.1436), index=18
  get-tuple-element.1456 = f32[6]{0} get-tuple-element(arg_tuple.1436), index=19
  get-tuple-element.1457 = s32[1]{0} get-tuple-element(arg_tuple.1436), index=20
  tuple.1459 = (s32[], s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, /*index=5*/f32[6]{0}, f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], /*index=10*/f32[5]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=15*/f32[6]{0}, f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, /*index=20*/f32[6]{0}, s32[1]{0}) tuple(constant.1458, get-tuple-element.1437, get-tuple-element.1438, get-tuple-element.1439, get-tuple-element.1440, /*index=5*/get-tuple-element.1441, get-tuple-element.1442, get-tuple-element.1443, get-tuple-element.1444, get-tuple-element.1445, /*index=10*/get-tuple-element.1446, get-tuple-element.1447, get-tuple-element.1448, get-tuple-element.1449, get-tuple-element.1450, /*index=15*/get-tuple-element.1451, get-tuple-element.1452, get-tuple-element.1453, get-tuple-element.1454, get-tuple-element.1455, /*index=20*/get-tuple-element.1456, get-tuple-element.1457)
  while.1460 = (s32[], s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, /*index=5*/f32[6]{0}, f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], /*index=10*/f32[5]{0}, f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=15*/f32[6]{0}, f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, /*index=20*/f32[6]{0}, s32[1]{0}) while(tuple.1459), condition=region_56.1409, body=region_1.896
  get-tuple-element.1461 = s32[] get-tuple-element(while.1460), index=0
  get-tuple-element.1478 = f32[5,2]{1,0} get-tuple-element(while.1460), index=17
  get-tuple-element.1479 = f32[6,3]{1,0} get-tuple-element(while.1460), index=18
  get-tuple-element.1480 = f32[5]{0} get-tuple-element(while.1460), index=19
  get-tuple-element.1481 = f32[6]{0} get-tuple-element(while.1460), index=20
  get-tuple-element.1482 = s32[1]{0} get-tuple-element(while.1460), index=21
  get-tuple-element.1462 = s32[] get-tuple-element(while.1460), index=1
  get-tuple-element.1463 = f32[50]{0} get-tuple-element(while.1460), index=2
  get-tuple-element.1464 = f32[50]{0} get-tuple-element(while.1460), index=3
  get-tuple-element.1465 = f32[5]{0} get-tuple-element(while.1460), index=4
  get-tuple-element.1466 = f32[6]{0} get-tuple-element(while.1460), index=5
  get-tuple-element.1467 = f32[200]{0} get-tuple-element(while.1460), index=6
  get-tuple-element.1468 = f32[] get-tuple-element(while.1460), index=7
  get-tuple-element.1469 = f32[5,6]{1,0} get-tuple-element(while.1460), index=8
  get-tuple-element.1470 = f32[] get-tuple-element(while.1460), index=9
  get-tuple-element.1471 = f32[5]{0} get-tuple-element(while.1460), index=10
  get-tuple-element.1472 = f32[6]{0} get-tuple-element(while.1460), index=11
  get-tuple-element.1473 = f32[5,6]{1,0} get-tuple-element(while.1460), index=12
  get-tuple-element.1474 = f32[] get-tuple-element(while.1460), index=13
  get-tuple-element.1475 = f32[5]{0} get-tuple-element(while.1460), index=14
  get-tuple-element.1476 = f32[6]{0} get-tuple-element(while.1460), index=15
  get-tuple-element.1477 = f32[] get-tuple-element(while.1460), index=16
  ROOT tuple.1483 = (s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, f32[6]{0}, /*index=5*/f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=10*/f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, f32[6]{0}, /*index=15*/f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, f32[6]{0}, /*index=20*/s32[1]{0}) tuple(get-tuple-element.1462, get-tuple-element.1463, get-tuple-element.1464, get-tuple-element.1465, get-tuple-element.1466, /*index=5*/get-tuple-element.1467, get-tuple-element.1468, get-tuple-element.1469, get-tuple-element.1470, get-tuple-element.1471, /*index=10*/get-tuple-element.1472, get-tuple-element.1473, get-tuple-element.1474, get-tuple-element.1475, get-tuple-element.1476, /*index=15*/get-tuple-element.1477, get-tuple-element.1453, get-tuple-element.1454, get-tuple-element.1455, get-tuple-element.1456, /*index=20*/get-tuple-element.1457)
}

isfinite.1484 {
  Arg_0.1485 = f32[] parameter(0)
  ROOT is-finite.1486 = pred[] is-finite(Arg_0.1485)
}

isinf.1487 {
  Arg_0.1488 = f32[] parameter(0)
  abs.1490 = f32[] abs(Arg_0.1488)
  constant.1489 = f32[] constant(inf)
  ROOT compare.1491 = pred[] compare(abs.1490, constant.1489), direction=EQ
}

isinf_0.1492 {
  Arg_0.1493 = f32[] parameter(0)
  abs.1495 = f32[] abs(Arg_0.1493)
  constant.1494 = f32[] constant(inf)
  ROOT compare.1496 = pred[] compare(abs.1495, constant.1494), direction=EQ
}

isnan.1497 {
  Arg_0.1498 = f32[] parameter(0)
  ROOT compare.1499 = pred[] compare(Arg_0.1498, Arg_0.1498), direction=NE
}

isnan_1.1500 {
  Arg_0.1501 = f32[] parameter(0)
  ROOT compare.1502 = pred[] compare(Arg_0.1501, Arg_0.1501), direction=NE
}

isclose.1503 {
  Arg_0.1504 = f32[] parameter(0)
  Arg_1.1505 = f32[] parameter(1)
  subtract.1508 = f32[] subtract(Arg_0.1504, Arg_1.1505)
  abs.1509 = f32[] abs(subtract.1508)
  Arg_2.1506 = f32[] parameter(2)
  abs.1510 = f32[] abs(Arg_1.1505)
  multiply.1511 = f32[] multiply(Arg_2.1506, abs.1510)
  constant.1507 = f32[] constant(1e-08)
  add.1512 = f32[] add(multiply.1511, constant.1507)
  compare.1513 = pred[] compare(abs.1509, add.1512), direction=LE
  call.1514 = pred[] call(Arg_0.1504), to_apply=isinf.1487
  call.1515 = pred[] call(Arg_1.1505), to_apply=isinf_0.1492
  or.1516 = pred[] or(call.1514, call.1515)
  not.1518 = pred[] not(or.1516)
  and.1519 = pred[] and(compare.1513, not.1518)
  and.1517 = pred[] and(call.1514, call.1515)
  compare.1520 = pred[] compare(Arg_0.1504, Arg_1.1505), direction=EQ
  and.1521 = pred[] and(and.1517, compare.1520)
  or.1522 = pred[] or(and.1519, and.1521)
  call.1523 = pred[] call(Arg_0.1504), to_apply=isnan.1497
  call.1524 = pred[] call(Arg_1.1505), to_apply=isnan_1.1500
  or.1525 = pred[] or(call.1523, call.1524)
  not.1526 = pred[] not(or.1525)
  ROOT and.1527 = pred[] and(or.1522, not.1526)
}

region_57.1528 {
  arg_tuple.1529 = (s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, f32[6]{0}, /*index=5*/f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=10*/f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, f32[6]{0}, /*index=15*/f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, f32[6]{0}, /*index=20*/s32[1]{0}) parameter(0)
  get-tuple-element.1532 = f32[50]{0} get-tuple-element(arg_tuple.1529), index=2
  get-tuple-element.1533 = f32[5]{0} get-tuple-element(arg_tuple.1529), index=3
  get-tuple-element.1534 = f32[6]{0} get-tuple-element(arg_tuple.1529), index=4
  get-tuple-element.1535 = f32[200]{0} get-tuple-element(arg_tuple.1529), index=5
  get-tuple-element.1536 = f32[] get-tuple-element(arg_tuple.1529), index=6
  get-tuple-element.1537 = f32[5,6]{1,0} get-tuple-element(arg_tuple.1529), index=7
  get-tuple-element.1538 = f32[] get-tuple-element(arg_tuple.1529), index=8
  get-tuple-element.1539 = f32[5]{0} get-tuple-element(arg_tuple.1529), index=9
  get-tuple-element.1540 = f32[6]{0} get-tuple-element(arg_tuple.1529), index=10
  get-tuple-element.1541 = f32[5,6]{1,0} get-tuple-element(arg_tuple.1529), index=11
  get-tuple-element.1542 = f32[] get-tuple-element(arg_tuple.1529), index=12
  get-tuple-element.1543 = f32[5]{0} get-tuple-element(arg_tuple.1529), index=13
  get-tuple-element.1544 = f32[6]{0} get-tuple-element(arg_tuple.1529), index=14
  get-tuple-element.1545 = f32[] get-tuple-element(arg_tuple.1529), index=15
  get-tuple-element.1546 = f32[5,2]{1,0} get-tuple-element(arg_tuple.1529), index=16
  get-tuple-element.1547 = f32[6,3]{1,0} get-tuple-element(arg_tuple.1529), index=17
  get-tuple-element.1548 = f32[5]{0} get-tuple-element(arg_tuple.1529), index=18
  get-tuple-element.1549 = f32[6]{0} get-tuple-element(arg_tuple.1529), index=19
  get-tuple-element.1550 = s32[1]{0} get-tuple-element(arg_tuple.1529), index=20
  get-tuple-element.1530 = s32[] get-tuple-element(arg_tuple.1529), index=0
  constant.1555 = s32[] constant(50)
  compare.1556 = pred[] compare(get-tuple-element.1530, constant.1555), direction=LT
  constant.1554 = s32[] constant(1)
  compare.1557 = pred[] compare(get-tuple-element.1530, constant.1554), direction=LT
  constant.1553 = s32[] constant(2)
  compare.1558 = pred[] compare(get-tuple-element.1530, constant.1553), direction=LE
  get-tuple-element.1531 = f32[50]{0} get-tuple-element(arg_tuple.1529), index=1
  subtract.1559 = s32[] subtract(get-tuple-element.1530, constant.1554)
  constant.1552 = s32[] constant(0)
  compare.1560 = pred[] compare(subtract.1559, constant.1552), direction=LT
  add.1561 = s32[] add(subtract.1559, constant.1555)
  select.1562 = s32[] select(compare.1560, add.1561, subtract.1559)
  reshape.1563 = s32[1]{0} reshape(select.1562)
  gather.1564 = f32[] gather(get-tuple-element.1531, reshape.1563), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  call.1565 = pred[] call(gather.1564), to_apply=isfinite.1484
  not.1566 = pred[] not(call.1565)
  subtract.1567 = s32[] subtract(get-tuple-element.1530, constant.1553)
  compare.1568 = pred[] compare(subtract.1567, constant.1552), direction=LT
  add.1569 = s32[] add(subtract.1567, constant.1555)
  select.1570 = s32[] select(compare.1568, add.1569, subtract.1567)
  reshape.1571 = s32[1]{0} reshape(select.1570)
  gather.1572 = f32[] gather(get-tuple-element.1531, reshape.1571), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  subtract.1573 = s32[] subtract(get-tuple-element.1530, constant.1554)
  compare.1574 = pred[] compare(subtract.1573, constant.1552), direction=LT
  add.1575 = s32[] add(subtract.1573, constant.1555)
  select.1576 = s32[] select(compare.1574, add.1575, subtract.1573)
  reshape.1577 = s32[1]{0} reshape(select.1576)
  gather.1578 = f32[] gather(get-tuple-element.1531, reshape.1577), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  constant.1551 = f32[] constant(0.01)
  call.1579 = pred[] call(gather.1572, gather.1578, constant.1551), to_apply=isclose.1503
  not.1580 = pred[] not(call.1579)
  or.1581 = pred[] or(not.1566, not.1580)
  or.1582 = pred[] or(compare.1558, or.1581)
  or.1583 = pred[] or(compare.1557, or.1582)
  ROOT and.1584 = pred[] and(compare.1556, or.1583)
}

ENTRY main.1608 {
  Arg_5.6 = pred[1]{0} parameter(5)
  Arg_6.7 = s32[] parameter(6)
  Arg_7.8 = f32[50]{0} parameter(7)
  Arg_8.9 = f32[50]{0} parameter(8)
  Arg_9.10 = f32[5]{0} parameter(9)
  Arg_10.11 = f32[6]{0} parameter(10)
  Arg_11.12 = f32[200]{0} parameter(11)
  Arg_12.13 = f32[] parameter(12)
  Arg_13.14 = f32[5,6]{1,0} parameter(13)
  Arg_14.15 = f32[] parameter(14)
  Arg_15.16 = f32[5]{0} parameter(15)
  Arg_16.17 = f32[6]{0} parameter(16)
  Arg_17.18 = f32[5,6]{1,0} parameter(17)
  Arg_18.19 = f32[] parameter(18)
  Arg_19.20 = f32[5]{0} parameter(19)
  Arg_20.21 = f32[6]{0} parameter(20)
  Arg_21.22 = f32[] parameter(21)
  Arg_0.1 = f32[5,2]{1,0} parameter(0)
  Arg_1.2 = f32[6,3]{1,0} parameter(1)
  Arg_2.3 = f32[5]{0} parameter(2)
  Arg_3.4 = f32[6]{0} parameter(3)
  Arg_4.5 = s32[1]{0} parameter(4)
  tuple.23 = (s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, f32[6]{0}, /*index=5*/f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=10*/f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, f32[6]{0}, /*index=15*/f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, f32[6]{0}, /*index=20*/s32[1]{0}) tuple(Arg_6.7, Arg_7.8, Arg_8.9, Arg_9.10, Arg_10.11, /*index=5*/Arg_11.12, Arg_12.13, Arg_13.14, Arg_14.15, Arg_15.16, /*index=10*/Arg_16.17, Arg_17.18, Arg_18.19, Arg_19.20, Arg_20.21, /*index=15*/Arg_21.22, Arg_0.1, Arg_1.2, Arg_2.3, Arg_3.4, /*index=20*/Arg_4.5)
  while.1585 = (s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, f32[6]{0}, /*index=5*/f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=10*/f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, f32[6]{0}, /*index=15*/f32[], f32[5,2]{1,0}, f32[6,3]{1,0}, f32[5]{0}, f32[6]{0}, /*index=20*/s32[1]{0}) while(tuple.23), condition=region_57.1528, body=region_0.1435
  get-tuple-element.1602 = f32[5,2]{1,0} get-tuple-element(while.1585), index=16
  get-tuple-element.1603 = f32[6,3]{1,0} get-tuple-element(while.1585), index=17
  get-tuple-element.1604 = f32[5]{0} get-tuple-element(while.1585), index=18
  get-tuple-element.1605 = f32[6]{0} get-tuple-element(while.1585), index=19
  get-tuple-element.1606 = s32[1]{0} get-tuple-element(while.1585), index=20
  get-tuple-element.1586 = s32[] get-tuple-element(while.1585), index=0
  get-tuple-element.1587 = f32[50]{0} get-tuple-element(while.1585), index=1
  get-tuple-element.1588 = f32[50]{0} get-tuple-element(while.1585), index=2
  get-tuple-element.1589 = f32[5]{0} get-tuple-element(while.1585), index=3
  get-tuple-element.1590 = f32[6]{0} get-tuple-element(while.1585), index=4
  get-tuple-element.1591 = f32[200]{0} get-tuple-element(while.1585), index=5
  get-tuple-element.1592 = f32[] get-tuple-element(while.1585), index=6
  get-tuple-element.1593 = f32[5,6]{1,0} get-tuple-element(while.1585), index=7
  get-tuple-element.1594 = f32[] get-tuple-element(while.1585), index=8
  get-tuple-element.1595 = f32[5]{0} get-tuple-element(while.1585), index=9
  get-tuple-element.1596 = f32[6]{0} get-tuple-element(while.1585), index=10
  get-tuple-element.1597 = f32[5,6]{1,0} get-tuple-element(while.1585), index=11
  get-tuple-element.1598 = f32[] get-tuple-element(while.1585), index=12
  get-tuple-element.1599 = f32[5]{0} get-tuple-element(while.1585), index=13
  get-tuple-element.1600 = f32[6]{0} get-tuple-element(while.1585), index=14
  get-tuple-element.1601 = f32[] get-tuple-element(while.1585), index=15
  ROOT tuple.1607 = (s32[], f32[50]{0}, f32[50]{0}, f32[5]{0}, f32[6]{0}, /*index=5*/f32[200]{0}, f32[], f32[5,6]{1,0}, f32[], f32[5]{0}, /*index=10*/f32[6]{0}, f32[5,6]{1,0}, f32[], f32[5]{0}, f32[6]{0}, /*index=15*/f32[]) tuple(get-tuple-element.1586, get-tuple-element.1587, get-tuple-element.1588, get-tuple-element.1589, get-tuple-element.1590, /*index=5*/get-tuple-element.1591, get-tuple-element.1592, get-tuple-element.1593, get-tuple-element.1594, get-tuple-element.1595, /*index=10*/get-tuple-element.1596, get-tuple-element.1597, get-tuple-element.1598, get-tuple-element.1599, get-tuple-element.1600, /*index=15*/get-tuple-element.1601)
}

